{"version":3,"file":"static/js/67.9a04a3f9.chunk.js","mappings":"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","sources":["components/status.js"],"sourcesContent":["import React, { useState, memo, useEffect } from 'react';\r\nimport { FaSolarPanel, FaBatteryFull, FaBatteryThreeQuarters, FaBatteryHalf, FaBatteryQuarter, FaBatteryEmpty, FaSignal } from \"react-icons/fa\";\r\nimport { BsLightningChargeFill, BsThermometerSun, BsSunFill, BsFillMoonStarsFill } from \"react-icons/bs\";\r\nimport { TbBulbOff, TbBulb, TbPlugConnected } from \"react-icons/tb\";\r\nimport { WiHumidity } from \"react-icons/wi\";\r\nimport { GiSoundWaves } from \"react-icons/gi\";\r\nimport { IoBatteryCharging } from \"react-icons/io5\";\r\n// Direct Sunlight: IoMdSunny\r\n// Ambient Daylight: WiDaySunny\r\n// Overcast Daylight:WiDayCloudy\r\n// Sunset & Sunrise: BsSunsetFill BsSunriseFill\r\n// Moonlight (Full moon): BsFillMoonStarsFill\r\n// Cloudy Night: IoCloudyNight\r\n\r\n//Battery Charging: IoBatteryCharging\r\n//Battery 100%: FaBatteryFull\r\n//Battery 75% FaBatteryThreeQuarters\r\n//Battery 50%: FaBatteryHalf\r\n//Battery 25%: FaBatteryQuarter\r\n//Battery 0%: FaBatteryEmpty\r\n\r\nfunction Status(props) {\r\n  console.log('Status:', props.data)\r\n  const data = props.data;\r\n  const sameDateData = props.sameDate;\r\n  const battPercent = data.batt_level;\r\n  const [battColor, setBattColor] = useState('');\r\n  const [humidity, setHumidity] = useState('-');\r\n\r\n  useEffect(() => {\r\n    callWeatherAPI();\r\n  }, [data]);\r\n\r\n  const callWeatherAPI = () => {\r\n    console.log('Fetching Weather Data');\r\n    try {\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=14.4506&lon=120.9828&appid=a09978101e59b60cb76ea444b36760cc&units=metric`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          setHumidity(data.main.humidity);\r\n        })\r\n        .catch(error => console.log(error));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const BattStatusIcon = () => {\r\n    if (battPercent >= 76) {\r\n      setBattColor('status-card battFull');\r\n      return <FaBatteryFull className='status-icon' />\r\n    } else if (battPercent >= 51 && battPercent <= 75) {\r\n      setBattColor('status-card battSafe');\r\n      return <FaBatteryThreeQuarters className='status-icon' />\r\n    } else if (battPercent >= 26 && battPercent <= 50) {\r\n      setBattColor('status-card battMid');\r\n      return <FaBatteryHalf className='status-icon' />\r\n    } else if (battPercent >= 1 && battPercent <= 25) {\r\n      setBattColor('status-card battDanger');\r\n      return <FaBatteryQuarter className='status-icon' />\r\n    } else {\r\n      setBattColor('status-card battDanger');\r\n      return <FaBatteryEmpty className='status-icon' />\r\n    }\r\n  };\r\n\r\n  const LampStatusIcon = () => {\r\n    if (parseFloat(data.led_status) === 1) {\r\n      return <div className='status-card lampON'>\r\n        <TbBulb className='status-icon' />\r\n        <h2>ON</h2>\r\n        <h5>LED Lamp</h5>\r\n      </div>\r\n    }\r\n    if (parseFloat(data.led_status) === 0) {\r\n      return <div className='status-card lampOFF'>\r\n        <TbBulbOff className='status-icon' />\r\n        <h2>OFF</h2>\r\n        <h5>LED Lamp</h5>\r\n      </div>\r\n    }\r\n  }\r\n\r\n  const GetEnergyYield = () => {\r\n    let energy = 0.0;\r\n    let totalEnergy = 0.0;\r\n    sameDateData.forEach(same => {\r\n      energy = energy + same.pv_power;\r\n    });\r\n    totalEnergy = (energy * 0.16667);\r\n    console.log(\"Energy: \" + totalEnergy);\r\n    return (parseFloat(totalEnergy).toFixed(2));\r\n  }\r\n\r\n  // Get the current time\r\n  const currentTime = new Date();\r\n\r\n  // Extract the hour and minute components from the current time\r\n  const currentHour = currentTime.getHours();\r\n  const currentMinute = currentTime.getMinutes();\r\n\r\n  // Split the lastTime string into hour and minute components\r\n  const [lastHour, lastMinute] = data.time.split(':').map(Number);\r\n\r\n  // Calculate the time difference in minutes\r\n  const timeDifference = (currentHour - lastHour) * 60 + (currentMinute - lastMinute);\r\n\r\n  const hoursDifference = Math.floor(timeDifference / 60);\r\n  const minutesDifference = timeDifference % 60;\r\n  let HRlabel = \" hr \";\r\n  let MINlabel = \" min \";\r\n  if (hoursDifference > 1) {\r\n    HRlabel = \" hrs \";\r\n  } else {\r\n    HRlabel = \" hr \";\r\n  }\r\n  if (minutesDifference > 1) {\r\n    MINlabel = \" mins ago.\";\r\n  } else {\r\n    MINlabel = \" min ago.\"\r\n  }\r\n\r\n  const GetLastUpdate = () => {\r\n    let active;\r\n    if (currentTime.toLocaleString(\"en-US\", { month: \"long\", day: 'numeric', year: 'numeric' }) === data.date) {\r\n      if (data.pv_power > 0.0 || data.charging === 1.0 || data.led_status === 1.0) {\r\n        active = \"Active\";\r\n      }\r\n    } else {\r\n      active = \"Inactive\";\r\n    }\r\n    return <div className='d-flex align-items-center gap-2 my-2'>\r\n      <div className={active === \"Active\" ? 'sl-status sl-active' : 'sl-status sl-inactive'}> - </div>\r\n      {currentTime.toLocaleString(\"en-US\", { month: \"long\", day: 'numeric', year: 'numeric' }) === data.date ?\r\n        timeDifference > 60 ?\r\n          <h6 className='my-0'>{active + \" | Last update \" + hoursDifference + HRlabel + minutesDifference + MINlabel}</h6> :\r\n          <h6 className='my-0'>{active + \" | Last update \" + timeDifference + MINlabel}</h6>\r\n        : <h6 className='my-0'>{active + \" | Last update \" + data.date}</h6>\r\n      }\r\n    </div>\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='status-container'>\r\n      <div className='d-flex align-items-center my-0'>\r\n        <h3 className='my-0'>System Status</h3>\r\n      </div>\r\n      <GetLastUpdate />\r\n\r\n      {/**Status Cards Section */}\r\n      <div className='status-section'>\r\n        <div className='status-cards-container'>\r\n          {/**1st row cards */}\r\n          <div className='cards-row d-flex justify-content-center gap-4 my-4'>\r\n            <div className='status-card'>\r\n              <FaSolarPanel className='status-icon' />\r\n              <h2>{parseFloat(data.pv_power)}W</h2>\r\n              <h5>Current Power</h5>\r\n            </div>\r\n            <div className='status-card'>\r\n              <BsLightningChargeFill className='status-icon' />\r\n              <h2>{GetEnergyYield()}Wh</h2>\r\n              <h5>Energy Yield</h5>\r\n            </div>\r\n            <div className='status-card'>\r\n              <TbPlugConnected className='status-icon' />\r\n              <h2>60Wh</h2>\r\n              <h5>Consumption</h5>\r\n            </div>\r\n            <div className={battColor}>\r\n              {/* <FaBatteryThreeQuarters className='status-icon'/> */}\r\n              <BattStatusIcon />\r\n              <h2>{battPercent}%</h2>\r\n              <h5>Battery</h5>\r\n            </div>\r\n            <LampStatusIcon />\r\n          </div>\r\n\r\n          {/**2nd row cards */}\r\n          <div className='cards-row d-flex justify-content-between gap-4'>\r\n            <div className='status-card'>\r\n              <BsThermometerSun className='status-icon' />\r\n              <h2>{parseFloat(data.temp)}°C</h2>\r\n              <h5>Ambient Temperature</h5>\r\n            </div>\r\n            <div className='status-card'>\r\n              <BsSunFill className='status-icon' />\r\n              <h2>{parseFloat(data.lux)} lux</h2>\r\n              <h5>Ambient Light</h5>\r\n            </div>\r\n            <div className='status-card'>\r\n              <WiHumidity className='status-icon' />\r\n              <h2>{humidity}%</h2>\r\n              <h5>Humidity</h5>\r\n            </div>\r\n            <div className='status-card'>\r\n              <GiSoundWaves className='status-icon' />\r\n              <h2>{parseFloat(data.snr)}dB</h2>\r\n              <h5>Signal-Noise Ratio</h5>\r\n            </div>\r\n            <div className='status-card'>\r\n              <FaSignal className='status-icon' />\r\n              <h2>{parseFloat(data.rssi)}dB</h2>\r\n              <h5>Signal Strength</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Status);"],"names":["Status","props","console","log","data","sameDateData","sameDate","battPercent","batt_level","useState","battColor","setBattColor","humidity","setHumidity","useEffect","callWeatherAPI","fetch","then","response","json","main","catch","error","BattStatusIcon","className","LampStatusIcon","parseFloat","led_status","currentTime","Date","currentHour","getHours","currentMinute","getMinutes","time","split","map","Number","timeDifference","hoursDifference","Math","floor","minutesDifference","HRlabel","MINlabel","GetLastUpdate","active","toLocaleString","month","day","year","date","pv_power","charging","totalEnergy","energy","forEach","same","toFixed","GetEnergyYield","temp","lux","snr","rssi","memo"],"sourceRoot":""}