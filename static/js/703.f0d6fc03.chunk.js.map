{"version":3,"file":"static/js/703.f0d6fc03.chunk.js","mappings":"8QAaAA,EAAAA,GAAAA,SACIC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,IAGJ,IAmJA,EAnJoB,SAACC,GACjB,IAAMC,EAAUD,EAAME,KAChBC,EAAOH,EAAMI,SAEnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAA8BF,EAAAA,EAAAA,UAAS,IAAG,eAAnCG,EAAO,KAAEC,EAAU,KAC1B,GAAgCJ,EAAAA,EAAAA,UAAS,IAAG,eAA3BK,GAAF,KAAa,OAE5BC,EAAAA,EAAAA,YAAU,WACN,IAII,OAHAJ,EAAS,IACTE,EAAW,IAEHN,GACJ,IAAK,MACDF,EAAQW,KAAI,SAAAC,GACRJ,GAAW,SAAAK,GAAQ,wBAAQA,GAAQ,CAAED,EAAIE,UAAW,IACpDL,GAAY,SAAAI,GAAQ,wBAAQA,GAAQ,CAAED,EAAIE,UAAW,IACrDR,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAIG,MAAO,GAClD,IAEA,MAEJ,IAAK,QACqBf,EAAQgB,QAAO,SAACC,EAAKC,GACvC,IAAMC,EAAeF,EAAIG,MAAK,SAACC,GAAE,OAAKA,EAAGC,OAASJ,EAAKI,IAAI,IAM3D,OALIH,EACAA,EAAaI,QAAoC,OAA1BC,WAAWN,EAAKJ,UAEvCG,EAAIQ,KAAK,CAAEH,KAAMJ,EAAKI,KAAMC,OAAsB,OAAdL,EAAKJ,WAEtCG,CACX,GAAG,IAEWN,KAAI,SAAAC,GACdJ,GAAW,SAAAK,GAAQ,wBAAQA,GAAQ,CAAED,EAAIW,QAAS,IAClDjB,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAIU,MAAO,GAClD,IAEA,MAEJ,IAAK,OAID,IAHA,IAAMI,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE5HC,EAAY,CAAC,EACVC,EAAI,EAAGA,EAAI5B,EAAQ6B,OAAQD,IAAK,CACrC,IAAME,EAAY9B,EAAQ4B,GAAGN,KAAKS,MAAM,KAClCC,EAAaN,EAAWO,QAAQH,EAAU,IAC1CI,EAAOJ,EAAU,GACjBK,EAAS,UAAMT,EAAWM,GAAW,YAAIE,GACzCE,EAAQpC,EAAQ4B,GAAGd,SACrBa,EAAUQ,GACVR,EAAUQ,IAAcC,EAExBT,EAAUQ,GAAaC,CAE/B,CAEA,IAAMC,EAAa,CAAC,EACpB,IAAK,IAAMf,KAAQK,EAAW,CAC1B,IAAMQ,EAAYb,EACZc,EAAQT,EAAUL,GACpBe,EAAWF,GACXE,EAAWF,IAAcC,EAEzBC,EAAWF,GAAaC,CAEhC,CAEA,IAAME,EAAc,GACpB,IAAK,IAAMH,KAAaE,EAAY,CAChC,MAA0BF,EAAUJ,MAAM,KAAI,eAAvCQ,EAAS,KACVC,GADgB,KACRd,EAAWO,QAAQM,GAAa,GACxCE,EAAMJ,EAAWF,GACvBG,EAAYb,KAAK,CAAEe,MAAOd,EAAWc,EAAQ,GAAIC,IAAAA,GACrD,CAEAH,EAAY3B,KAAI,SAAAC,GACZJ,GAAW,SAAAK,GAAQ,wBAAQA,GAAQ,CAAED,EAAI6B,KAAM,IAC/ChC,GAAY,SAAAI,GAAQ,wBAAQA,GAAQ,CAAED,EAAI6B,KAAM,IAChDnC,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAI4B,OAAQ,GACnD,IACA,MAEJ,QACI,OAKZ,CAFE,SAEF,CACJ,GAAG,CAACxC,EAASE,IAIb,IAiCMD,EAAO,CACTyC,OAHWrC,EAIXsC,SAAU,CACN,CACItC,MAAO,gBACPJ,KAAMM,EACNqC,gBAAiB,2BAU7B,OAAO,SAAC,KAAG,CAACC,QAjDI,CACZC,YAAY,EACZC,QAAS,CACLC,OAAQ,CACJC,SAAU,UAEdC,MAAO,CACHC,SAAS,EACTC,KAAM,cACNC,KAAM,CACFC,KAAM,KAGdC,KAAM,CACFC,IAAK,CACDC,SAAS,EACTC,KAAM,QAiCQzD,KAAMA,GACxC,EC3JAV,EAAAA,GAAAA,SACIC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,ICHJP,EAAAA,GAAAA,SACIE,EAAAA,GACAD,EAAAA,GACAE,EAAAA,GACAiE,EAAAA,GACAC,EAAAA,GACA/D,EAAAA,GACAD,EAAAA,EACAiE,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAjE,EAAAA,IAGJ,IA2MA,EA3MuB,SAACC,GACpB,IAAMC,EAAUD,EAAME,KAChBC,EAAOH,EAAMI,SAEnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAA0BF,EAAAA,EAAAA,UAAS,IAAG,eAA/B4D,EAAK,KAAEC,EAAQ,KACtB,GAAwB7D,EAAAA,EAAAA,UAAS,IAAG,eAA7B8D,EAAI,KAAEC,EAAO,KACpB,GAA4B/D,EAAAA,EAAAA,UAAS,IAAG,eAAjCgE,EAAM,KAAEC,EAAS,MAExB3D,EAAAA,EAAAA,YAAU,WACN,IAMI,OALAJ,EAAS,IACT2D,EAAS,IACTE,EAAQ,IACRE,EAAU,IAEFnE,GACJ,IAAK,MACDF,EAAQW,KAAI,SAAAC,GACRqD,GAAS,SAAApD,GAAQ,wBAAQA,GAAQ,CAAED,EAAI0D,YAAa,IACpDhE,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAIG,MAAO,IAC9CoD,GAAQ,SAAAtD,GAAQ,wBAAQA,GAAQ,CAAED,EAAI2D,YAAa,IACnDF,GAAU,SAAAxD,GAAQ,wBAAQA,GAAQ,CAAED,EAAI4D,UAAW,GACvD,IAEA,MAEJ,IAAK,QACqBxE,EAAQgB,QAAO,SAACC,EAAKC,GACvC,IAAMC,EAAeF,EAAIG,MAAK,SAACC,GAAE,OAAKA,EAAGC,OAASJ,EAAKI,IAAI,IAM3D,OALIH,EACAA,EAAa6C,MAAQS,KAAKC,IAAIvD,EAAa6C,MAAOxC,WAAWN,EAAKoD,aAElErD,EAAIQ,KAAK,CAAEH,KAAMJ,EAAKI,KAAM0C,MAAO9C,EAAKoD,aAErCrD,CACX,GAAG,IAEWN,KAAI,SAAAC,GACdqD,GAAS,SAAApD,GAAQ,wBAAQA,GAAQ,CAAED,EAAIoD,OAAQ,IAC/C1D,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAIU,MAAO,GAClD,IAEA,MAEJ,IAAK,OAMD,IALA,IAAMI,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE5HiD,EAAe,CAAC,EAChBC,EAAe,CAAC,EAEbhD,EAAI,EAAGA,EAAI5B,EAAQ6B,OAAQD,IAAK,CACrC,IAAME,EAAY9B,EAAQ4B,GAAGN,KAAKS,MAAM,KAClCC,EAAaN,EAAWO,QAAQH,EAAU,IAC1CI,EAAOJ,EAAU,GACjBK,EAAS,UAAMT,EAAWM,GAAW,YAAIE,GACzC8B,EAAQhE,EAAQ4B,GAAG0C,WAErBK,EAAaxC,IACbwC,EAAaxC,IAAc6B,EAC3BY,EAAazC,OAEbwC,EAAaxC,GAAa6B,EAC1BY,EAAazC,GAAa,EAElC,CAEA,IAAMG,EAAc,GACpB,IAAK,IAAMH,KAAawC,EAAc,CAClC,MAA0BxC,EAAUJ,MAAM,KAAI,eAAvCQ,EAAS,KACVC,GADgB,KACRd,EAAWO,QAAQM,GAAa,GACxCyB,EAAQW,EAAaxC,GAAayC,EAAazC,GACrDG,EAAYb,KAAK,CAAEe,MAAOd,EAAWc,EAAQ,GAAIwB,MAAOA,GAC5D,CAEA1B,EAAY3B,KAAI,SAAAC,GACZqD,GAAS,SAAApD,GAAQ,wBAAQA,GAAQ,CAAED,EAAIoD,OAAQ,IAC/C1D,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAI4B,OAAQ,GACnD,IAEA,MAEJ,QACI,OAKZ,CAFE,SAEF,CACJ,GAAG,CAACxC,EAASE,IAIb,IA+DMD,EAAO,CACTyC,OAHWrC,EAIXsC,SAAU,CACN,CACIkC,KAAM,OACNxE,MAAO,OACPJ,KAAMiE,EACNtB,gBAAiB,uBACjBkC,YAAa,uBAEbC,QAAS,KACTC,SAAS,GAEb,CACIH,KAAM,OACNxE,MAAO,WACPJ,KAAMmE,EACNxB,gBAAiB,yBACjBkC,YAAa,yBAEbC,QAAS,KACTC,SAAS,GAEb,CACIH,KAAM,MACNxE,MAAO,YACPJ,KAAM+D,EACNpB,gBAAiB,uBAYjBmC,QAAS,QAKrB,OAAO,SAAC,KAAK,CAAClC,QA3GE,CACZC,YAAY,EACZmC,YAAa,CACTC,WAAW,EACXxB,KAAM,SAGVyB,OAAQ,CACJC,GAAI,CACAP,KAAM,SACN5B,SAAU,OACVoC,MAAO,QAGXC,GAAI,CACAT,KAAM,SACNU,QAAQ,EACRtC,SAAU,QACVoC,MAAO,OAEPG,IAAK,EACLd,IAAK,EACLe,MAAO,CACHC,SAAU,KAItB3C,QAAS,CACLC,OAAQ,CACJC,SAAU,UAOdC,MAAO,CACHC,SAAS,EACTC,KAAM,gBACNC,KAAM,CACFC,KAAM,KAGdC,KAAM,CACFC,IAAK,CACDC,SAAS,EACTC,KAAM,QA6DUzD,KAAMA,GAC1C,ECvNAV,EAAAA,GAAAA,SACIE,EAAAA,GACAD,EAAAA,GACAE,EAAAA,GACAiE,EAAAA,GACAC,EAAAA,GACA/D,EAAAA,GACAD,EAAAA,EACAiE,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAjE,EAAAA,IAIJ,IAoMA,EApMwB,SAACC,GACrB,IAAMC,EAAUD,EAAME,KAChBC,EAAOH,EAAMI,SAInB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCuF,EAAQ,KAAEC,EAAW,KAC5B,GAAwBxF,EAAAA,EAAAA,UAAS,IAAG,eAA7ByF,EAAI,KAAEC,EAAO,KACpB,GAA0B1F,EAAAA,EAAAA,UAAS,IAAG,eAA/B2F,EAAK,KAAEC,EAAQ,MAEtBtF,EAAAA,EAAAA,YAAU,WACN,IAMI,OALAJ,EAAS,IACTsF,EAAY,IACZE,EAAQ,IACRE,EAAS,IAED9F,GACJ,IAAK,MACDF,EAAQW,KAAI,SAAAC,GACRN,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAIG,MAAO,IAC9C6E,GAAY,SAAA/E,GAAQ,wBAAQA,GAAQ,CAAED,EAAIE,UAAW,IACrDgF,GAAQ,SAAAjF,GAAQ,wBAAQA,GAAQ,CAAED,EAAIiF,MAAO,IAC7CG,GAAS,SAAAnF,GAAQ,wBAAQA,GAAQ,CAAED,EAAIqF,KAAM,GACjD,IAEA,MAEJ,IAAK,QACD,IAAMC,EAAgBlG,EAAQgB,QAAO,SAACC,EAAKC,GACvC,IAAMC,EAAeF,EAAIG,MAAK,SAACC,GAAE,OAAKA,EAAGC,OAASJ,EAAKI,IAAI,IAS3D,OARIH,GACAA,EAAagF,WAAyC,OAA5B3E,WAAWN,EAAKJ,UAC1CK,EAAaiF,UAAY5E,WAAWN,EAAK2E,MACzC1E,EAAakF,SAAW7E,WAAWN,EAAK+E,KACxC9E,EAAamF,OAAS,GAEtBrF,EAAIQ,KAAK,CAAEH,KAAMJ,EAAKI,KAAM6E,UAA2B,OAAhBjF,EAAKJ,SAAoBsF,SAAUlF,EAAK2E,KAAMQ,QAASnF,EAAK+E,IAAKK,MAAO,IAE5GrF,CACX,GAAG,IAEHiF,EAAcvF,KAAI,SAAAC,GACdN,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAIU,MAAO,IAC9CsE,GAAY,SAAA/E,GAAQ,wBAAQA,GAAQ,CAAED,EAAIuF,WAAY,IACtDL,GAAQ,SAAAjF,GAAQ,wBAAQA,GAAQ,CAAED,EAAIwF,SAAWxF,EAAI0F,OAAQ,IAC7DN,GAAS,SAAAnF,GAAQ,wBAAQA,GAAQ,CAAED,EAAIyF,QAAUzF,EAAI0F,OAAQ,GACjE,IACAC,QAAQC,MAAMN,GAEd,MAEJ,IAAK,OAQD,IAPA,IAAMxE,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE5H+E,EAAa,CAAC,EACdC,EAAc,CAAC,EACfC,EAAa,CAAC,EACd/B,EAAe,CAAC,EAEbhD,EAAI,EAAGA,EAAI5B,EAAQ6B,OAAQD,IAAK,CACrC,IAAME,EAAY9B,EAAQ4B,GAAGN,KAAKS,MAAM,KAClCC,EAAaN,EAAWO,QAAQH,EAAU,IAC1CI,EAAOJ,EAAU,GACjBK,EAAS,UAAMT,EAAWM,GAAW,YAAIE,GACzCyD,EAAW3F,EAAQ4B,GAAGd,SACtB+E,EAAO7F,EAAQ4B,GAAGiE,KAClBE,EAAQ/F,EAAQ4B,GAAGqE,IAErBQ,EAAWtE,IACXsE,EAAWtE,IAAcwD,EACzBe,EAAYvE,IAAc0D,EAC1Bc,EAAWxE,IAAc4D,EACzBnB,EAAazC,OAEbsE,EAAWtE,GAAawD,EACxBe,EAAYvE,GAAa0D,EACzBc,EAAWxE,GAAa4D,EACxBnB,EAAazC,GAAa,EAElC,CAEA,IAAMG,EAAc,GACpB,IAAK,IAAMH,KAAasE,EAAY,CAChC,MAA0BtE,EAAUJ,MAAM,KAAI,eAAvCQ,EAAS,KACVC,GADgB,KACRd,EAAWO,QAAQM,GAAa,GACxCoD,EAAWc,EAAWtE,GAAayC,EAAazC,GAChD0D,EAAOa,EAAYvE,GAAayC,EAAazC,GAC7C4D,EAAQY,EAAWxE,GAAayC,EAAazC,GACnDG,EAAYb,KAAK,CAAEe,MAAOd,EAAWc,EAAQ,GAAImD,SAAUA,EAAUE,KAAMA,EAAMI,IAAKF,GAC1F,CAEAzD,EAAY3B,KAAI,SAAAC,GACZgF,GAAY,SAAA/E,GAAQ,wBAAQA,GAAQ,CAAED,EAAI+E,UAAW,IACrDG,GAAQ,SAAAjF,GAAQ,wBAAQA,GAAQ,CAAED,EAAIiF,MAAO,IAC7CG,GAAS,SAAAnF,GAAQ,wBAAQA,GAAQ,CAAED,EAAIqF,KAAM,IAC7C3F,GAAS,SAAAO,GAAQ,wBAAQA,GAAQ,CAAED,EAAI4B,OAAQ,GACnD,IAEA,MAEJ,QACI,OAKZ,CAFE,SAEF,CACJ,GAAG,CAACxC,EAASE,IAIb,IA+CMD,EAAO,CACTyC,OAHWrC,EAIXsC,SAAU,CACN,CAEIkC,KAAM,OACNxE,MAAO,sBACPuC,gBAAiB,oBACjB3C,KAAM4F,EACNf,YAAa,oBACbC,QAAS,MAEb,CAEIF,KAAM,OACNxE,MAAO,sBACPuC,gBAAiB,uBACjB3C,KAAM8F,EACNjB,YAAa,uBACbC,QAAS,KAEb,CAEIF,KAAM,OACNxE,MAAO,kBACPJ,KAAM0F,EACN/C,gBAAiB,qBACjBkC,YAAa,qBACbC,QAAS,QAKrB,OAAO,SAAC,KAAK,CAAClC,QAhFE,CACZC,YAAY,EACZmC,YAAa,CACTC,WAAW,EACXxB,KAAM,SAEVX,QAAS,CACLC,OAAQ,CACJC,SAAU,UAEdC,MAAO,CACHC,SAAS,EACTC,KAAM,oBACNC,KAAM,CACFC,KAAM,KAGdC,KAAM,CACFC,IAAK,CACDC,SAAS,EACTC,KAAM,OAalByB,OAAQ,CACJyB,EAAG,CACD/B,KAAM,SACN5B,SAAU,SAEZqC,GAAI,CACAT,KAAM,SACN5B,SAAU,UAwCUhD,KAAMA,GAC1C,ECzNA,SAAS4G,EAAS9G,GAChB,OAAwCK,EAAAA,EAAAA,UAAS,IAAI0G,MAAO,eAArDC,EAAY,KAAEC,EAAe,KACpC,GAA4C5G,EAAAA,EAAAA,WAAS,GAAM,eAApD6G,EAAc,KAAEC,EAAiB,KAClCC,EAAU,IAAIL,KAAK,KAAM,GAAI,GACnC,GAAgC1G,EAAAA,EAAAA,UAAS,OAAM,eAAxCD,EAAQ,KAAEiH,EAAW,KAC5B,GAAoChH,EAAAA,EAAAA,UAAS,CAAEoC,MAAO,OAAQ6E,IAAK,UAAWnF,KAAM,YAAY,eAAzFoF,EAAU,KAAEC,EAAa,KAS1BC,EAAc,SAAH,GAAW,EAALpF,MAAN,IAAaqF,EAAO,EAAPA,QAAO,OACnC,SAAC,MAAa,CAACC,UAAU,mBAAmBD,QAASA,GAAW,EAE5DE,EAAuB,SAACjE,GAC5B0D,EAAY1D,GAEV6D,EADW,UAAT7D,EACY,CAAElB,MAAO,OAAQN,KAAM,WACnB,SAATwB,EACK,CAAExB,KAAM,WAER,CAAEM,MAAO,OAAQ6E,IAAK,UAAWnF,KAAM,WAEzD,EAEMW,EAAUyE,EACVM,EAAgBb,EAAac,mBAAmB,QAAShF,GAIzDiF,EAFU/H,EAAME,KAEK8H,QAAO,SAAAnH,GAChC,IAAMoH,EAAU,IAAIlB,KAAKlG,EAAIU,MACvBkB,EAAQwF,EAAQC,WAChBZ,EAAMW,EAAQE,UACdhG,EAAO8F,EAAQG,cAEfC,EAAQ,IAAItB,KAAKc,GACjBS,EAASD,EAAMH,WACfK,EAAOF,EAAMF,UACbK,EAAQH,EAAMD,cAEpB,OAAQhI,GACN,IAAK,MAML,QACE,OAAOqC,IAAU6F,GAAUhB,IAAQiB,GAAQpG,IAASqG,EALtD,IAAK,QACH,OAAO/F,IAAU6F,GAAUnG,IAASqG,EACtC,IAAK,OACH,OAAOrG,IAASqG,EAItB,IAIA,OACE,iBAAKb,UAAU,qBAAoB,WACjC,gBAAKA,UAAU,iCAAgC,UAC7C,eAAIA,UAAU,OAAM,SAAC,uBAEvB,iBAAKA,UAAU,4BAA2B,WACxC,gBAAKA,UAAU,iCAAgC,UAC7C,iBAAKA,UAAU,8EAA6E,WAC1F,SAACF,EAAW,CAACC,QA3DE,WACvBP,GAAmBD,EACrB,KA0DU,eAAIS,UAAU,OAAM,SAAEE,SAEpB,SACN,iBAAKF,UAAU,4DAA2D,WACxE,mBAAQA,UAAwB,QAAbvH,EAAqB,6CAA+C,oBAAqBsH,QAAS,kBAAME,EAAqB,MAAM,EAAC,SAAC,SACxJ,mBAAQD,UAAwB,UAAbvH,EAAuB,6CAA+C,oBAAqBsH,QAAS,kBAAME,EAAqB,QAAQ,EAAC,SAAC,WAC5J,mBAAQD,UAAwB,SAAbvH,EAAsB,6CAA+C,oBAAqBsH,QAAS,kBAAME,EAAqB,OAAO,EAAC,SAAC,eAI7JV,IACC,gBAAKS,UAAU,qBAAoB,UACjC,SAAC,IAAU,CACTc,SAAUzB,EACV0B,SAvEW,SAACnH,GACpB0F,EAAgB1F,GAChB4F,GAAkB,EACpB,EAqEUwB,oBAAkC,UAAbvI,EACrBwI,eAA6B,SAAbxI,EAChByI,aAAa,wBACbC,gBAAgB,YAChBC,QAAM,EACN3B,QAASA,EACT4B,QAAS,IAAIjC,UAKnB,iBAAKY,UAAU,wBAAuB,WAGpC,gBAAKA,UAAU,0BAAyB,UACtC,SAAC,EAAW,CAACzH,KAAM6H,EAAY3H,SAAUA,OAU3C,gBAAKuH,UAAU,aAAY,UACzB,SAAC,EAAe,CAACzH,KAAM6H,EAAY3H,SAAUA,EAAUuH,UAAU,aAInE,gBAAKA,UAAU,QAAO,UACpB,SAAC,EAAc,CAACzH,KAAM6H,EAAY3H,SAAUA,EAAUuH,UAAU,iBAK1E,CAEA,OAAesB,EAAAA,EAAAA,MAAKnC,E","sources":["charts/energyChart.js","charts/chargingChart.js","charts/battLevelChart.js","charts/productionChart.js","components/analysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    zoomPlugin\r\n);\r\n\r\nconst EnergyChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [dataSys, setDataSys] = useState([]);\r\n    const [dataCons, setDataCons] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setDataSys([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.pv_power]);\r\n                        setDataCons(prevList => [...prevList, row.pv_power]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.pv_gen += parseFloat(item.pv_power)*0.16667;\r\n                        } else {\r\n                            acc.push({ date: item.date, pv_gen: item.pv_power*0.16667 });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.pv_gen]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const sumByDate = {};\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const value = sysData[i].pv_power;\r\n                        if (sumByDate[yearMonth]) {\r\n                            sumByDate[yearMonth] += value;\r\n                        } else {\r\n                            sumByDate[yearMonth] = value;\r\n                        }\r\n                    }\r\n\r\n                    const sumByMonth = {};\r\n                    for (const date in sumByDate) {\r\n                        const yearMonth = date;\r\n                        const value = sumByDate[date];\r\n                        if (sumByMonth[yearMonth]) {\r\n                            sumByMonth[yearMonth] += value;\r\n                        } else {\r\n                            sumByMonth[yearMonth] = value;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in sumByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const sum = sumByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], sum });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.sum]);\r\n                        setDataCons(prevList => [...prevList, row.sum]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Energy (Wh)',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                // zoom: {\r\n                //     pinch: {\r\n                //         enabled: true       // Enable pinch zooming\r\n                //     },\r\n                //     wheel: {\r\n                //         enabled: true       // Enable wheel zooming\r\n                //     },\r\n                //     mode: 'x',\r\n                // }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Generate (Wh)',\r\n                data: dataSys,\r\n                backgroundColor: 'rgba(255, 99, 132, 1)',\r\n            },\r\n            // {\r\n            //     label: 'Consumption',\r\n            //     data: dataCons,\r\n            //     backgroundColor: 'rgba(53, 162, 235, 1)',\r\n            // },\r\n        ],\r\n    };\r\n\r\n    return <Bar options={options} data={data} />;\r\n};\r\n\r\nexport default EnergyChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    zoomPlugin\r\n);\r\n\r\nconst ChargingChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [charge, setCharge] = useState([]);\r\n    const [discharge, setDischarge] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setCharge([]);\r\n            setDischarge([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setCharge(prevList => [...prevList, row.pv_power]);\r\n                        setDischarge(prevList => [...prevList, row.pv_power]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.sys_value += parseFloat(item.pv_power);\r\n                            existingItem.cons_value += parseFloat(item.pv_power);\r\n                        } else {\r\n                            acc.push({ date: item.date, sys_value: item.pv_power, cons_value: item.pv_power });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                   byMonthFilter.map(row => {\r\n                    setCharge(prevList => [...prevList, row.sys_value]);\r\n                    setDischarge(prevList => [...prevList, row.cons_value]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n                    \r\n                    break\r\n\r\n                case 'year':\r\n                    return;\r\n\r\n                default:\r\n                    return; \r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Charge-Discharge Time',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Charging',\r\n                data: charge,\r\n                backgroundColor: 'rgba(22, 160, 133, 1)',\r\n            },\r\n            {\r\n                label: 'Discharging',\r\n                data: discharge,\r\n                backgroundColor: 'rgba(207, 0, 15, 1)',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Bar options={options} data={data} />;\r\n};\r\n\r\nexport default ChargingChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\nconst BattLevelChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [level, setLevel] = useState([]);\r\n    const [lamp, setLamp] = useState([]);\r\n    const [status, setStatus] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setLevel([]);\r\n            setLamp([]);\r\n            setStatus([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setLevel(prevList => [...prevList, row.batt_level]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                        setLamp(prevList => [...prevList, row.led_status]);\r\n                        setStatus(prevList => [...prevList, row.charging]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.level = Math.max(existingItem.level, parseFloat(item.batt_level));\r\n                        } else {\r\n                            acc.push({ date: item.date, level: item.batt_level });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setLevel(prevList => [...prevList, row.level]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const levelByMonth = {};\r\n                    const countByMonth = {};\r\n\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const level = sysData[i].batt_level;\r\n\r\n                        if (levelByMonth[yearMonth]) {\r\n                            levelByMonth[yearMonth] += level;\r\n                            countByMonth[yearMonth]++;\r\n                        } else {\r\n                            levelByMonth[yearMonth] = level;\r\n                            countByMonth[yearMonth] = 1;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in levelByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const level = levelByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], level: level });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setLevel(prevList => [...prevList, row.level]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        interaction: {\r\n            intersect: false,\r\n            mode: 'index',\r\n        },\r\n\r\n        scales: {\r\n            y2: {\r\n                type: 'linear',\r\n                position: 'left',\r\n                stack: 'batt',\r\n                // stackWeight: 2,\r\n            },\r\n            y1: {\r\n                type: 'linear',\r\n                offset: true,\r\n                position: 'right',\r\n                stack: 'batt',\r\n                // stackWeight: 1,\r\n                min: 0,\r\n                max: 1,\r\n                ticks: {\r\n                    stepSize: 1\r\n                }\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom',\r\n                // labels: {\r\n                //     filter: function (legendItem, data) {\r\n                //         return legendItem.datasetIndex !== 0;\r\n                //     },\r\n                // },\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Battery Level',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                // zoom: {\r\n                //     pinch: {\r\n                //         enabled: true       // Enable pinch zooming\r\n                //     },\r\n                //     wheel: {\r\n                //         enabled: true       // Enable wheel zooming\r\n                //     },\r\n                //     mode: 'x',\r\n                // }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                type: 'line',\r\n                label: 'Lamp',\r\n                data: lamp,\r\n                backgroundColor: 'rgb(207, 0, 15, 0.8)',\r\n                borderColor: 'rgb(207, 0, 15, 0.8)',\r\n                // borderColor: 'rgba(255,0,0,1)',\r\n                yAxisID: 'y1',\r\n                stepped: true,\r\n            },\r\n            {\r\n                type: 'line',\r\n                label: 'Charging',\r\n                data: status,\r\n                backgroundColor: 'rgba(28, 164, 63, 0.8)',\r\n                borderColor: 'rgba(28, 164, 63, 0.8)',\r\n                // borderColor: 'rgba(0,255,0,1)',\r\n                yAxisID: 'y1',\r\n                stepped: true,\r\n            },\r\n            {\r\n                type: 'bar',\r\n                label: 'Level (%)',\r\n                data: level,\r\n                backgroundColor: 'rgba(9, 15, 30, 0.8)',\r\n                // borderColor: 'rgba(75,192,192,1)',\r\n                // backgroundColor: (point) => {\r\n                //     if (status[point.dataIndex]) {\r\n                //         return 'rgba(28, 164, 63, 0.8)'; // green if charging\r\n                //     } else if (lamp[point.dataIndex]) {\r\n                //         return 'rgb(207, 0, 15, 0.8)'; // red if lamp is ON\r\n                //     } else {\r\n                //         return 'rgba(75,192,192,0.8)'; // blue if neither\r\n                //     }\r\n                // },\r\n                // fill: false,\r\n                yAxisID: 'y2',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default BattLevelChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\n\r\nconst ProductionChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    // console.table(sysData);\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [generate, setGenerate] = useState([]);\r\n    const [temp, setTemp] = useState([]);\r\n    const [light, setLight] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setGenerate([]);\r\n            setTemp([]);\r\n            setLight([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                        setGenerate(prevList => [...prevList, row.pv_power]);\r\n                        setTemp(prevList => [...prevList, row.temp]);\r\n                        setLight(prevList => [...prevList, row.lux]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.sys_power += parseFloat(item.pv_power) * 0.16667;\r\n                            existingItem.sys_temp += parseFloat(item.temp);\r\n                            existingItem.sys_lux += parseFloat(item.lux);\r\n                            existingItem.count += 1;\r\n                        } else {\r\n                            acc.push({ date: item.date, sys_power: item.pv_power * 0.16667, sys_temp: item.temp, sys_lux: item.lux, count: 1 });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                        setGenerate(prevList => [...prevList, row.sys_power]);\r\n                        setTemp(prevList => [...prevList, row.sys_temp / row.count]);\r\n                        setLight(prevList => [...prevList, row.sys_lux / row.count]);\r\n                    });\r\n                    console.table(byMonthFilter);\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const genByMonth = {};\r\n                    const tempByMonth = {};\r\n                    const luxByMonth = {};\r\n                    const countByMonth = {};\r\n\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const generate = sysData[i].pv_power;\r\n                        const temp = sysData[i].temp;\r\n                        const light = sysData[i].lux;\r\n\r\n                        if (genByMonth[yearMonth]) {\r\n                            genByMonth[yearMonth] += generate;\r\n                            tempByMonth[yearMonth] += temp;\r\n                            luxByMonth[yearMonth] += light;\r\n                            countByMonth[yearMonth]++;\r\n                        } else {\r\n                            genByMonth[yearMonth] = generate;\r\n                            tempByMonth[yearMonth] = temp;\r\n                            luxByMonth[yearMonth] = light;\r\n                            countByMonth[yearMonth] = 1;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in genByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const generate = genByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        const temp = tempByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        const light = luxByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], generate: generate, temp: temp, lux: light });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setGenerate(prevList => [...prevList, row.generate]);\r\n                        setTemp(prevList => [...prevList, row.temp]);\r\n                        setLight(prevList => [...prevList, row.lux]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        interaction: {\r\n            intersect: false,\r\n            mode: 'index',\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Energy Production',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                // zoom: {\r\n                //     pinch: {\r\n                //         enabled: true       // Enable pinch zooming\r\n                //     },\r\n                //     wheel: {\r\n                //         enabled: true       // Enable wheel zooming\r\n                //     },\r\n                //     mode: 'x',\r\n                // }\r\n            }\r\n        },\r\n        scales: {\r\n            y: {\r\n              type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n              position: 'right',\r\n            },\r\n            y1: {\r\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n                position: 'left',\r\n              },\r\n        }\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                // fill: true,\r\n                type: 'line',\r\n                label: 'Temperature (°C)',\r\n                backgroundColor: 'rgb(4, 59, 92, 1)',\r\n                data: temp,\r\n                borderColor: 'rgb(4, 59, 92, 1)',\r\n                yAxisID: 'y1',\r\n            },\r\n            {\r\n                // fill: true,\r\n                type: 'line',\r\n                label: 'Ambient Light (lux)',\r\n                backgroundColor: 'rgb(22, 160, 133, 1)',\r\n                data: light,\r\n                borderColor: 'rgb(22, 160, 133, 1)',\r\n                yAxisID: 'y',\r\n            },\r\n            {\r\n                // fill: true,\r\n                type: 'line',\r\n                label: 'Generation (Wh)',\r\n                data: generate,\r\n                backgroundColor: 'rgb(207, 0, 15, 1)',\r\n                borderColor: 'rgb(207, 0, 15, 1)',\r\n                yAxisID: 'y1',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default ProductionChart;","import React, { useState, memo } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { FaCalendarAlt } from 'react-icons/fa';\r\nimport EnergyChart from '../charts/energyChart';\r\nimport ChargingChart from '../charts/chargingChart';\r\nimport BattLevelChart from '../charts/battLevelChart';\r\nimport ProductionChart from '../charts/productionChart';\r\n\r\nfunction Analysis(props) {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [showDatePicker, setShowDatePicker] = useState(false);\r\n  const minDate = new Date(2022, 10, 1);\r\n  const [viewMode, setViewMode] = useState('day');\r\n  const [dateFormat, setDateFormat] = useState({ month: 'long', day: 'numeric', year: 'numeric' });\r\n\r\n  const toggleDatePicker = () => {\r\n    setShowDatePicker(!showDatePicker);\r\n  };\r\n  const handleChange = (date) => {\r\n    setSelectedDate(date);\r\n    setShowDatePicker(false);\r\n  };\r\n  const CustomInput = ({ value, onClick }) => (\r\n    <FaCalendarAlt className=\"date-picker-icon\" onClick={onClick} />\r\n  );\r\n  const handleViewModeChange = (mode) => {\r\n    setViewMode(mode);\r\n    if (mode === 'month') {\r\n      setDateFormat({ month: 'long', year: 'numeric' });\r\n    } else if (mode === 'year') {\r\n      setDateFormat({ year: 'numeric' });\r\n    } else {\r\n      setDateFormat({ month: 'long', day: 'numeric', year: 'numeric' });\r\n    }\r\n  };\r\n\r\n  const options = dateFormat;\r\n  const formattedDate = selectedDate.toLocaleDateString('en-US', options);\r\n\r\n  const allData = props.data;\r\n  //Filtered Data by Date\r\n  const filterData = allData.filter(row => {\r\n    const logDate = new Date(row.date);\r\n    const month = logDate.getMonth();\r\n    const day = logDate.getDate();\r\n    const year = logDate.getFullYear();\r\n\r\n    const fDate = new Date(formattedDate);\r\n    const fMonth = fDate.getMonth();\r\n    const fday = fDate.getDate();\r\n    const fYear = fDate.getFullYear();\r\n\r\n    switch (viewMode) {\r\n      case 'day':\r\n        return month === fMonth && day === fday && year === fYear;\r\n      case 'month':\r\n        return month === fMonth && year === fYear;\r\n      case 'year':\r\n        return year === fYear;\r\n      default:\r\n        return month === fMonth && day === fday && year === fYear;\r\n    }\r\n  });\r\n  // console.table(filterData);\r\n  // console.log(formattedDate);\r\n\r\n  return (\r\n    <div className='analysis-container'>\r\n      <div className='d-flex align-items-center my-0'>\r\n        <h3 className='my-0'>System Analysis</h3>\r\n      </div>\r\n      <div className='d-flex align-items-center'>\r\n        <div className='analysis-date-picker w-50 py-1'>\r\n          <div className='date-picker-container d-flex justify-content-start align-items-center gap-2'>\r\n            <CustomInput onClick={toggleDatePicker} />\r\n            <h6 className='my-0'>{formattedDate}</h6>\r\n          </div>\r\n        </div>     {/** DATE PICKER */}\r\n        <div className='analysis-date-type w-100 d-flex justify-content-end gap-2'>\r\n          <button className={viewMode === 'day' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('day')}>Day</button>\r\n          <button className={viewMode === 'month' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('month')}>Month</button>\r\n          <button className={viewMode === 'year' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('year')}>Year</button>\r\n        </div>\r\n      </div>\r\n\r\n      {showDatePicker && (\r\n        <div className=\"calendar-container\">\r\n          <DatePicker\r\n            selected={selectedDate}\r\n            onChange={handleChange}\r\n            showMonthYearPicker={viewMode === 'month'}\r\n            showYearPicker={viewMode === 'year'}\r\n            customInput={<></>}\r\n            popperPlacement=\"top-start\"\r\n            inline\r\n            minDate={minDate}\r\n            maxDate={new Date()}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className='analysis-section mt-3'>\r\n        {/******* ENERGY CHART ***************************************************/}\r\n\r\n        <div className='chart energy-chart mb-4'>\r\n          <EnergyChart data={filterData} viewMode={viewMode} />\r\n        </div>\r\n\r\n        {/******* CHARGING CHART **************************************************/}\r\n        {/* <div className='chart mb-4'>\r\n          <ChargingChart data={filterData} viewMode={viewMode} />\r\n        </div> */}\r\n\r\n\r\n        {/******* ENERGY ANALYSIS CHART COMBINED **********************************/}\r\n        <div className='chart mb-4'>\r\n          <ProductionChart data={filterData} viewMode={viewMode} className='chart' />\r\n        </div>\r\n\r\n        {/******* BATTERY LEVEL ANALYSIS CHART ************************************/}\r\n        <div className='chart'>\r\n          <BattLevelChart data={filterData} viewMode={viewMode} className='chart' />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Analysis);"],"names":["ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","zoomPlugin","props","sysData","data","view","viewMode","useState","label","setLabel","dataSys","setDataSys","setDataCons","useEffect","map","row","prevList","pv_power","time","reduce","acc","item","existingItem","find","el","date","pv_gen","parseFloat","push","monthNames","sumByDate","i","length","dateParts","split","monthIndex","indexOf","year","yearMonth","value","sumByMonth","resultArray","monthName","month","sum","labels","datasets","backgroundColor","options","responsive","plugins","legend","position","title","display","text","font","size","zoom","pan","enabled","mode","PointElement","LineElement","Filler","LineController","BarController","level","setLevel","lamp","setLamp","status","setStatus","batt_level","led_status","charging","Math","max","levelByMonth","countByMonth","type","borderColor","yAxisID","stepped","interaction","intersect","scales","y2","stack","y1","offset","min","ticks","stepSize","generate","setGenerate","temp","setTemp","light","setLight","lux","byMonthFilter","sys_power","sys_temp","sys_lux","count","console","table","genByMonth","tempByMonth","luxByMonth","y","Analysis","Date","selectedDate","setSelectedDate","showDatePicker","setShowDatePicker","minDate","setViewMode","day","dateFormat","setDateFormat","CustomInput","onClick","className","handleViewModeChange","formattedDate","toLocaleDateString","filterData","filter","logDate","getMonth","getDate","getFullYear","fDate","fMonth","fday","fYear","selected","onChange","showMonthYearPicker","showYearPicker","customInput","popperPlacement","inline","maxDate","memo"],"sourceRoot":""}