{"version":3,"file":"static/js/703.f34f7a45.chunk.js","mappings":"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","sources":["charts/energyChart.js","charts/chargingChart.js","charts/battLevelChart.js","charts/productionChart.js","components/analysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\nconst EnergyChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [dataSys, setDataSys] = useState([]);\r\n    const [dataCons, setDataCons] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setDataSys([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.pv_power]);\r\n                        setDataCons(prevList => [...prevList, row.pv_power]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.pv_gen += parseFloat(item.pv_power) * 0.08333;\r\n                        } else {\r\n                            acc.push({ date: item.date, pv_gen: item.pv_power * 0.08333 });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.pv_gen]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const sumByDate = {};\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const value = sysData[i].pv_power;\r\n                        if (sumByDate[yearMonth]) {\r\n                            sumByDate[yearMonth] += value;\r\n                        } else {\r\n                            sumByDate[yearMonth] = value;\r\n                        }\r\n                    }\r\n\r\n                    const sumByMonth = {};\r\n                    for (const date in sumByDate) {\r\n                        const yearMonth = date;\r\n                        const value = sumByDate[date];\r\n                        if (sumByMonth[yearMonth]) {\r\n                            sumByMonth[yearMonth] += value;\r\n                        } else {\r\n                            sumByMonth[yearMonth] = value;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in sumByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const sum = sumByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], sum });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.sum]);\r\n                        setDataCons(prevList => [...prevList, row.sum]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n            intersect: false,\r\n            mode: 'index',\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Energy (Wh)',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {   \r\n                type: 'line',\r\n                label: 'Generate (Wh)',\r\n                data: dataSys,\r\n                backgroundColor: 'rgba(255, 99, 132, 1)',\r\n                borderColor: 'rgba(255, 99, 132, 1)',\r\n            },\r\n            // {\r\n            //     label: 'Consumption',\r\n            //     data: dataCons,\r\n            //     backgroundColor: 'rgba(53, 162, 235, 1)',\r\n            // },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default EnergyChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    zoomPlugin\r\n);\r\n\r\nconst ChargingChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [charge, setCharge] = useState([]);\r\n    const [discharge, setDischarge] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setCharge([]);\r\n            setDischarge([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setCharge(prevList => [...prevList, row.pv_power]);\r\n                        setDischarge(prevList => [...prevList, row.pv_power]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.sys_value += parseFloat(item.pv_power);\r\n                            existingItem.cons_value += parseFloat(item.pv_power);\r\n                        } else {\r\n                            acc.push({ date: item.date, sys_value: item.pv_power, cons_value: item.pv_power });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                   byMonthFilter.map(row => {\r\n                    setCharge(prevList => [...prevList, row.sys_value]);\r\n                    setDischarge(prevList => [...prevList, row.cons_value]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n                    \r\n                    break\r\n\r\n                case 'year':\r\n                    return;\r\n\r\n                default:\r\n                    return; \r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Charge-Discharge Time',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Charging',\r\n                data: charge,\r\n                backgroundColor: 'rgba(22, 160, 133, 1)',\r\n            },\r\n            {\r\n                label: 'Discharging',\r\n                data: discharge,\r\n                backgroundColor: 'rgba(207, 0, 15, 1)',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Bar options={options} data={data} />;\r\n};\r\n\r\nexport default ChargingChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\nconst BattLevelChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [level, setLevel] = useState([]);\r\n    const [lamp, setLamp] = useState([]);\r\n    const [status, setStatus] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setLevel([]);\r\n            setLamp([]);\r\n            setStatus([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setLevel(prevList => [...prevList, row.batt_level]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                        setLamp(prevList => [...prevList, row.led_status]);\r\n                        setStatus(prevList => [...prevList, row.charging]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.level = Math.max(existingItem.level, parseFloat(item.batt_level));\r\n                        } else {\r\n                            acc.push({ date: item.date, level: item.batt_level });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setLevel(prevList => [...prevList, row.level]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const levelByMonth = {};\r\n                    const countByMonth = {};\r\n\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const level = sysData[i].batt_level;\r\n\r\n                        if (levelByMonth[yearMonth]) {\r\n                            levelByMonth[yearMonth] += level;\r\n                            countByMonth[yearMonth]++;\r\n                        } else {\r\n                            levelByMonth[yearMonth] = level;\r\n                            countByMonth[yearMonth] = 1;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in levelByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const level = levelByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], level: level });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setLevel(prevList => [...prevList, row.level]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n            intersect: false,\r\n            mode: 'index',\r\n        },\r\n\r\n        scales: {\r\n            x: {\r\n                type: 'category',\r\n                ticks: {\r\n                    maxRotation: 0,\r\n                    autoSkipPadding: 50,\r\n                },\r\n            },\r\n            y2: {\r\n                type: 'linear',\r\n                position: 'left',\r\n                min: 0,\r\n                max: 100,\r\n            },\r\n            y1: {\r\n                type: 'linear',\r\n                offset: true,\r\n                position: 'right',\r\n                min: 0,\r\n                max: 1,\r\n                ticks: {\r\n                    stepSize: 1,\r\n                }\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom',\r\n                display: true,\r\n                labels: {\r\n                    filter: function (legendItem, chartData) {\r\n                        if (view !== 'day' && (legendItem.text === 'Lamp' || legendItem.text === 'Charging')) {\r\n                            return false; // Hide Lamp and Charge legends when view is not 'day'\r\n                        }\r\n                        return true; // Display other legends\r\n                    },\r\n                },\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: view === 'day' ? 'Battery Level, Charging & LED Status' : 'Average Battery Level',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            },\r\n            clip: {\r\n                left: 25, // Adjust the number of initially visible data points\r\n                right: 25, // Adjust the number of initially visible data points\r\n            },\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                type: 'line',\r\n                label: 'Lamp',\r\n                data: lamp,\r\n                backgroundColor: 'rgb(243, 156, 18, 0.8)',\r\n                borderColor: 'rgb(243, 156, 18, 0.8)',\r\n                yAxisID: 'y1',\r\n                stepped: true,\r\n                order: 1,\r\n            },\r\n            {\r\n                type: 'line',\r\n                label: 'Charging',\r\n                data: status,\r\n                backgroundColor: 'rgba(28, 164, 63, 0.8)',\r\n                borderColor: 'rgba(28, 164, 63, 0.8)',\r\n                yAxisID: 'y1',\r\n                stepped: true,\r\n                order: 1,\r\n            },\r\n            {\r\n                type: view === 'day' ? 'line' : 'bar',\r\n                label: 'Level (%)',\r\n                data: level,\r\n                backgroundColor: 'rgba(9, 15, 30, 0.8)',\r\n                borderColor: 'rgba(9, 15, 30, 0.8)',\r\n                yAxisID: 'y2',\r\n                order: 2,\r\n                fill: true\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default BattLevelChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\n\r\nconst ProductionChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [generate, setGenerate] = useState([]);\r\n    const [temp, setTemp] = useState([]);\r\n    const [light, setLight] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setGenerate([]);\r\n            setTemp([]);\r\n            setLight([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                        setGenerate(prevList => [...prevList, row.pv_power]);\r\n                        setTemp(prevList => [...prevList, row.temp]);\r\n                        setLight(prevList => [...prevList, row.lux]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.sys_power += parseFloat(item.pv_power) * 0.08333;\r\n                            existingItem.sys_temp += parseFloat(item.temp);\r\n                            existingItem.sys_lux += parseFloat(item.lux);\r\n                            existingItem.count += 1;\r\n                        } else {\r\n                            acc.push({ date: item.date, sys_power: item.pv_power * 0.08333, sys_temp: item.temp, sys_lux: item.lux, count: 1 });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                        setGenerate(prevList => [...prevList, row.sys_power]);\r\n                        setTemp(prevList => [...prevList, row.sys_temp / row.count]);\r\n                        setLight(prevList => [...prevList, row.sys_lux / row.count]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const genByMonth = {};\r\n                    const tempByMonth = {};\r\n                    const luxByMonth = {};\r\n                    const countByMonth = {};\r\n\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const generate = sysData[i].pv_power;\r\n                        const temp = sysData[i].temp;\r\n                        const light = sysData[i].lux;\r\n\r\n                        if (genByMonth[yearMonth]) {\r\n                            genByMonth[yearMonth] += generate;\r\n                            tempByMonth[yearMonth] += temp;\r\n                            luxByMonth[yearMonth] += light;\r\n                            countByMonth[yearMonth]++;\r\n                        } else {\r\n                            genByMonth[yearMonth] = generate;\r\n                            tempByMonth[yearMonth] = temp;\r\n                            luxByMonth[yearMonth] = light;\r\n                            countByMonth[yearMonth] = 1;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in genByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const generate = genByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        const temp = tempByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        const light = luxByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], generate: generate, temp: temp, lux: light });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setGenerate(prevList => [...prevList, row.generate]);\r\n                        setTemp(prevList => [...prevList, row.temp]);\r\n                        setLight(prevList => [...prevList, row.lux]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n            intersect: false,\r\n            mode: 'index',\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: view === 'day' ? \"Solar Panel's Production\" : \"Average Solar Panel's Production\",\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            }\r\n        },\r\n        scales: {\r\n            x: {\r\n                type: 'category',\r\n                ticks: {\r\n                    maxRotation: 0,\r\n                    autoSkipPadding: 50,\r\n                },\r\n            },\r\n            y: {\r\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n                position: 'right',\r\n            },\r\n            y1: {\r\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n                position: 'left',\r\n            },\r\n        }\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                // fill: true,\r\n                type: 'line',\r\n                label: 'Temperature (°C)',\r\n                backgroundColor: 'rgb(4, 59, 92, 1)',\r\n                data: temp,\r\n                borderColor: 'rgb(4, 59, 92, 1)',\r\n                yAxisID: 'y1',\r\n            },\r\n            {\r\n                // fill: true,\r\n                type: 'line',\r\n                label: 'Ambient Light (lux)',\r\n                backgroundColor: 'rgb(22, 160, 133, 1)',\r\n                data: light,\r\n                borderColor: 'rgb(22, 160, 133, 1)',\r\n                yAxisID: 'y',\r\n            },\r\n            {\r\n                // fill: true,\r\n                type: view === 'day' ? 'line' : 'bar',\r\n                label: view === 'day' ? 'Power (W)' : 'Energy (Wh)',\r\n                data: generate,\r\n                backgroundColor: 'rgb(207, 0, 15, 1)',\r\n                borderColor: 'rgb(207, 0, 15, 1)',\r\n                yAxisID: 'y1',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default ProductionChart;","import React, { useState, memo } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { FaCalendarAlt } from 'react-icons/fa';\r\nimport EnergyChart from '../charts/energyChart';\r\nimport ChargingChart from '../charts/chargingChart';\r\nimport BattLevelChart from '../charts/battLevelChart';\r\nimport ProductionChart from '../charts/productionChart';\r\n\r\nfunction Analysis(props) {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [showDatePicker, setShowDatePicker] = useState(false);\r\n  const minDate = new Date(2022, 10, 1);\r\n  const [viewMode, setViewMode] = useState('day');\r\n  const [dateFormat, setDateFormat] = useState({ month: 'long', day: 'numeric', year: 'numeric' });\r\n\r\n  const toggleDatePicker = () => {\r\n    setShowDatePicker(!showDatePicker);\r\n  };\r\n  const handleChange = (date) => {\r\n    setSelectedDate(date);\r\n    setShowDatePicker(false);\r\n  };\r\n  const CustomInput = ({ value, onClick }) => (\r\n    <FaCalendarAlt className=\"date-picker-icon\" onClick={onClick} />\r\n  );\r\n  const handleViewModeChange = (mode) => {\r\n    setViewMode(mode);\r\n    if (mode === 'month') {\r\n      setDateFormat({ month: 'long', year: 'numeric' });\r\n    } else if (mode === 'year') {\r\n      setDateFormat({ year: 'numeric' });\r\n    } else {\r\n      setDateFormat({ month: 'long', day: 'numeric', year: 'numeric' });\r\n    }\r\n  };\r\n\r\n  const options = dateFormat;\r\n  const formattedDate = selectedDate.toLocaleDateString('en-US', options);\r\n\r\n  const allData = props.data;\r\n  //Filtered Data by Date\r\n  const filterData = allData.filter(row => {\r\n    const logDate = new Date(row.date);\r\n    const month = logDate.getMonth();\r\n    const day = logDate.getDate();\r\n    const year = logDate.getFullYear();\r\n\r\n    const fDate = new Date(formattedDate);\r\n    const fMonth = fDate.getMonth();\r\n    const fday = fDate.getDate();\r\n    const fYear = fDate.getFullYear();\r\n\r\n    switch (viewMode) {\r\n      case 'day':\r\n        return month === fMonth && day === fday && year === fYear;\r\n      case 'month':\r\n        return month === fMonth && year === fYear;\r\n      case 'year':\r\n        return year === fYear;\r\n      default:\r\n        return month === fMonth && day === fday && year === fYear;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className='analysis-container'>\r\n      <div className='d-flex align-items-center my-0'>\r\n        <h3 className='my-0'>System Analysis</h3>\r\n      </div>\r\n      <div className='d-flex align-items-center'>\r\n        <div className='analysis-date-picker w-50 py-1'>\r\n          <div className='date-picker-container d-flex justify-content-start align-items-center gap-2'>\r\n            <CustomInput onClick={toggleDatePicker} />\r\n            <h6 className='my-0'>{formattedDate}</h6>\r\n          </div>\r\n        </div>     {/** DATE PICKER */}\r\n        <div className='analysis-date-type w-100 d-flex justify-content-end gap-2'>\r\n          <button className={viewMode === 'day' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('day')}>Day</button>\r\n          <button className={viewMode === 'month' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('month')}>Month</button>\r\n          <button className={viewMode === 'year' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('year')}>Year</button>\r\n        </div>\r\n      </div>\r\n\r\n      {showDatePicker && (\r\n        <div className=\"calendar-container\">\r\n          <DatePicker\r\n            selected={selectedDate}\r\n            onChange={handleChange}\r\n            showMonthYearPicker={viewMode === 'month'}\r\n            showYearPicker={viewMode === 'year'}\r\n            customInput={<></>}\r\n            popperPlacement=\"top-start\"\r\n            inline\r\n            minDate={minDate}\r\n            maxDate={new Date()}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className='analysis-section mt-3'>\r\n        {/******* ENERGY CHART ***************************************************/}\r\n\r\n        {/* <div className='chart energy-chart mb-4'>\r\n          <EnergyChart data={filterData} viewMode={viewMode} />\r\n        </div> */}\r\n\r\n        {/******* CHARGING CHART **************************************************/}\r\n        {/* <div className='chart mb-4'>\r\n          <ChargingChart data={filterData} viewMode={viewMode} />\r\n        </div> */}\r\n\r\n\r\n        {/******* ENERGY ANALYSIS CHART COMBINED **********************************/}\r\n        <div className='chart mb-4'>\r\n          <ProductionChart data={filterData} viewMode={viewMode} className='chart' />\r\n        </div>\r\n\r\n        {/******* BATTERY LEVEL ANALYSIS CHART ************************************/}\r\n        <div className='chart'>\r\n          <BattLevelChart data={filterData} viewMode={viewMode} className='chart' />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Analysis);"],"names":["ChartJS","LinearScale","CategoryScale","BarElement","PointElement","LineElement","Legend","Tooltip","Filler","LineController","BarController","zoomPlugin","Title","props","sysData","data","view","viewMode","useState","label","setLabel","level","setLevel","lamp","setLamp","status","setStatus","useEffect","map","row","prevList","batt_level","time","led_status","charging","reduce","acc","item","existingItem","find","el","date","Math","max","parseFloat","push","monthNames","levelByMonth","countByMonth","i","length","dateParts","split","monthIndex","indexOf","year","yearMonth","resultArray","monthName","month","options","responsive","maintainAspectRatio","interaction","intersect","mode","scales","x","type","ticks","maxRotation","autoSkipPadding","y2","position","min","y1","offset","stepSize","plugins","legend","display","labels","filter","legendItem","chartData","text","title","font","size","zoom","pan","enabled","pinch","wheel","clip","left","right","datasets","backgroundColor","borderColor","yAxisID","stepped","order","fill","generate","setGenerate","temp","setTemp","light","setLight","pv_power","lux","sys_power","sys_temp","sys_lux","count","genByMonth","tempByMonth","luxByMonth","y","Analysis","Date","selectedDate","setSelectedDate","showDatePicker","setShowDatePicker","minDate","setViewMode","day","dateFormat","setDateFormat","CustomInput","value","onClick","className","handleViewModeChange","formattedDate","toLocaleDateString","filterData","logDate","getMonth","getDate","getFullYear","fDate","fMonth","fday","fYear","selected","onChange","showMonthYearPicker","showYearPicker","customInput","popperPlacement","inline","maxDate","memo"],"sourceRoot":""}