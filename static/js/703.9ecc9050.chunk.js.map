{"version":3,"file":"static/js/703.9ecc9050.chunk.js","mappings":"0PAiBAA,EAAAA,GAAAA,SACIC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,ICfJX,EAAAA,GAAAA,SACIE,EAAAA,GACAD,EAAAA,GACAE,EAAAA,GACAS,EAAAA,GACAL,EAAAA,EACAD,EAAAA,GACAK,EAAAA,IAGJ,I,oBCNAX,EAAAA,GAAAA,SACIC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IAGJ,IAkUA,EAlUuB,SAACE,GACpB,IAAMC,EAAUD,EAAME,KAChBC,EAAOH,EAAMI,SAEnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAA0BF,EAAAA,EAAAA,UAAS,IAAG,eAA/BG,EAAK,KAAEC,EAAQ,KACtB,GAAwBJ,EAAAA,EAAAA,UAAS,IAAG,eAA7BK,EAAI,KAAEC,EAAO,KACpB,GAA4BN,EAAAA,EAAAA,UAAS,IAAG,eAAjCO,EAAM,KAAEC,EAAS,KAExB,GAAgCR,EAAAA,EAAAA,UAAS,IAAG,eAArCS,EAAQ,KAAEC,EAAW,KAC5B,GAAgCV,EAAAA,EAAAA,UAAS,IAAG,eAArCW,EAAQ,KAAEC,EAAW,MAE5BC,EAAAA,EAAAA,YAAU,WACN,IASI,OARAX,EAAS,IACTE,EAAS,IACTE,EAAQ,IACRE,EAAU,IAEVE,EAAY,IACZE,EAAY,IAEJd,GACJ,IAAK,MACDF,EAAQkB,KAAI,SAAAC,GACRX,GAAS,SAAAY,GAAQ,wBAAQA,GAAQ,CAAED,EAAIE,YAAa,IACpDf,GAAS,SAAAc,GAAQ,wBAAQA,GAAQ,CAAED,EAAIG,MAAO,IAC9CZ,GAAQ,SAAAU,GAAQ,wBAAQA,GAAQ,CAAED,EAAII,YAAa,IACnDX,GAAU,SAAAQ,GAAQ,wBAAQA,GAAQ,CAAED,EAAIK,UAAW,GACvD,IAEA,MAEJ,IAAK,QAgBmBxB,EAAQyB,QAAO,SAACC,EAAKC,GACrC,IAAMC,EAAeF,EAAIG,MAAK,SAACC,GAAE,OAAKA,EAAGC,OAASJ,EAAKI,IAAI,IAO3D,OANIH,GACAA,EAAaI,SAAWC,KAAKC,IAAIN,EAAaI,SAAUG,WAAWR,EAAKN,aACxEO,EAAaQ,SAAWH,KAAKI,IAAIT,EAAaQ,SAAUD,WAAWR,EAAKN,cAExEK,EAAIY,KAAK,CAAEP,KAAMJ,EAAKI,KAAMC,SAAUG,WAAWR,EAAKN,YAAae,SAAUD,WAAWR,EAAKN,cAE1FK,CACX,GAAG,IAESR,KAAI,SAAAC,GACZL,GAAY,SAAAM,GAAQ,wBAAQA,GAAQ,CAAED,EAAIa,UAAW,IACrDhB,GAAY,SAAAI,GAAQ,wBAAQA,GAAQ,CAAED,EAAIiB,UAAW,IACrD9B,GAAS,SAAAc,GAAQ,wBAAQA,GAAQ,CAAED,EAAIY,MAAO,GAClD,IAGA,MAEJ,IAAK,OA0CD,IAPA,IAAMQ,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE5HC,EAAgB,CAAC,EACjBC,EAAe,CAAC,EAChBC,EAAgB,CAAC,EACjBC,EAAgB,CAAC,EAEdC,EAAI,EAAGA,EAAI5C,EAAQ6C,OAAQD,IAAK,CACrC,IAAME,EAAY9C,EAAQ4C,GAAGb,KAAKgB,MAAM,KAClCC,EAAaT,EAAWU,QAAQH,EAAU,IAC1CI,EAAOJ,EAAU,GACjBK,EAAS,UAAMZ,EAAWS,GAAW,YAAIE,GACzCE,EAAMC,SAASP,EAAU,IACzBvC,EAAQ4B,WAAWnC,EAAQ4C,GAAGvB,YAE/BmB,EAAcW,KACfX,EAAcW,GAAa,CAAC,EAC5BV,EAAaU,GAAa,CAAC,EAC3BT,EAAcS,GAAa,CAAC,EAC5BR,EAAcQ,GAAa,CAAC,GAG3BX,EAAcW,GAAWC,KAC1BZ,EAAcW,GAAWC,GAAO,GAChCX,EAAaU,GAAWC,GAAO,EAC/BV,EAAcS,GAAWC,GAAO,EAChCT,EAAcQ,GAAWC,GAAO,GAGpCZ,EAAcW,GAAWC,GAAKd,KAAK/B,GACnCkC,EAAaU,GAAWC,KACxBV,EAAcS,GAAWC,IAAQ7C,EACjCoC,EAAcQ,GAAWC,IAAQ7C,CACrC,CAEA,IAAM+C,EAAc,GACpB,IAAK,IAAMH,KAAaX,EAAe,CACnC,MAA0BW,EAAUJ,MAAM,KAAI,eAAvCQ,EAAS,KACVC,GADgB,KACRjB,EAAWU,QAAQM,GAAa,GACxCE,EAAY,GACZC,EAAY,GAElB,IAAK,IAAMN,KAAOZ,EAAcW,GAAY,CACxC,IAAMnB,EAAWC,KAAKC,IAAG,MAARD,MAAI,OAAQO,EAAcW,GAAWC,KAChDhB,EAAWH,KAAKI,IAAG,MAARJ,MAAI,OAAQO,EAAcW,GAAWC,KACtDK,EAAUnB,KAAKN,GACf0B,EAAUpB,KAAKF,EACnB,CAEA,IAAMuB,EAAkBF,EAAUhC,QAAO,SAACC,EAAKkC,GAAG,OAAKlC,EAAMkC,CAAG,GAAE,GAAKH,EAAUZ,OAC3EgB,EAAkBH,EAAUjC,QAAO,SAACC,EAAKkC,GAAG,OAAKlC,EAAMkC,CAAG,GAAE,GAAKF,EAAUb,OAEjFS,EAAYhB,KAAK,CAAEkB,MAAOjB,EAAWiB,EAAQ,GAAIG,gBAAAA,EAAiBE,gBAAAA,GACtE,CAEAP,EAAYpC,KAAI,SAAAC,GACZL,GAAY,SAAAM,GAAQ,wBAAQA,GAAQ,CAAED,EAAIwC,iBAAkB,IAC5D3C,GAAY,SAAAI,GAAQ,wBAAQA,GAAQ,CAAED,EAAI0C,iBAAkB,IAC5DvD,GAAS,SAAAc,GAAQ,wBAAQA,GAAQ,CAAED,EAAIqC,OAAQ,GACnD,IAEA,MAEJ,QACI,OAKZ,CAFE,SAEF,CACJ,GAAG,CAACxD,EAASE,IAEb,IAAM4D,EAAU,CACZC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,CACTC,WAAW,EACXC,KAAM,SAGVC,OAAiB,QAATlE,EAAiB,CACrBmE,EAAG,CACCC,SAAS,GAEbC,EAAG,CACClC,IAAK,EACLH,IAAK,MAGP,CACEmC,EAAG,CACCG,KAAM,WACNC,MAAO,CACHC,YAAa,EACbC,gBAAiB,KAGzBC,GAAI,CACAJ,KAAM,SACNK,SAAU,OACVxC,IAAK,EACLH,IAAK,KAET4C,GAAI,CACAN,KAAM,SACNO,QAAQ,EACRF,SAAU,QACVxC,IAAK,EACLH,IAAK,EACLuC,MAAO,CACHO,SAAU,KAI1BC,QAAS,CACLC,OAAQ,CACJL,SAAU,SACVM,SAAS,EACTC,OAAQ,CACJC,OAAQ,SAAUC,EAAYC,GAC1B,MAAa,QAATrF,GAAuC,SAApBoF,EAAWE,MAAuC,aAApBF,EAAWE,IAIpE,IAGRC,MAAO,CACHN,SAAS,EACTK,KAAe,QAATtF,EAAiB,uCAAkD,UAATA,EAAmB,gBAAkB,wBACrGwF,KAAM,CACFC,KAAM,KAGdC,KAAM,CACFC,IAAK,CACDC,SAAS,EACT3B,KAAM,KAEVyB,KAAM,CACFG,MAAO,CACHD,SAAS,GAEbE,MAAO,CACHF,SAAS,GAEb3B,KAAM,MAGd8B,KAAM,CACFC,KAAM,GACNC,MAAO,MAOblG,EAAO,CACTmF,OAHW/E,EAIX+F,SAAmB,QAATlG,EACN,CACI,CACIsE,KAAM,MACNnE,MAAO,UACPJ,KAAMY,EACNwF,gBAAiB,uBACjBC,YAAa,qBACbC,QAAS,KAGb,CACI/B,KAAM,MACNnE,MAAO,UACPJ,KAAMc,EACNsF,gBAAiB,uBACjBC,YAAa,uBACbC,QAAS,MAIf,CACE,CACI/B,KAAM,OACNnE,MAAO,OACPJ,KAAMQ,EACN4F,gBAAiB,yBACjBC,YAAa,yBACbC,QAAS,KACTC,SAAS,EACTC,MAAO,GAEX,CACIjC,KAAM,OACNnE,MAAO,WACPJ,KAAMU,EACN0F,gBAAiB,yBACjBC,YAAa,yBACbC,QAAS,KACTC,SAAS,EACTC,MAAO,GAEX,CACIjC,KAAe,QAATtE,EAAiB,OAAS,MAChCG,MAAO,YACPJ,KAAMM,EACN8F,gBAAiB,uBACjBC,YAAa,uBACbC,QAAS,KACTE,MAAO,EACPC,MAAM,KAKtB,OAAO,SAAC,KAAK,CAAC5C,QAASA,EAAS7D,KAAMA,GAC1C,EC7UAf,EAAAA,GAAAA,SACIC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACA+G,EAAAA,GACA9G,EAAAA,IAIJ,IAyOA,EAzOwB,SAACE,GACrB,IAAMC,EAAUD,EAAME,KAChBC,EAAOH,EAAMI,SAEnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCwG,EAAQ,KAAEC,EAAW,KAC5B,GAAwBzG,EAAAA,EAAAA,UAAS,IAAG,eAA7B0G,EAAI,KAAEC,EAAO,KACpB,GAA0B3G,EAAAA,EAAAA,UAAS,IAAG,eAA/B4G,EAAK,KAAEC,EAAQ,MAEtBhG,EAAAA,EAAAA,YAAU,WACN,IAMI,OALAX,EAAS,IACTuG,EAAY,IACZE,EAAQ,IACRE,EAAS,IAED/G,GACJ,IAAK,MACD,IAAMgH,EAAeC,MAAMC,KAAK,IAAIC,IAAIrH,EAAQkB,KAAI,SAAAC,GAAG,OAAIA,EAAIG,IAAI,MAGnE4F,EAAaI,MAAK,SAACC,EAAGC,GAClB,IAAMC,EAAQ,IAAIC,KAAK,cAAD,OAAeH,IAC/BI,EAAQ,IAAID,KAAK,cAAD,OAAeF,IACrC,OAAOC,EAAMG,UAAYD,EAAMC,SACnC,IAGAV,EAAaW,SAAQ,SAAAxH,GACjB,IAAMyH,EAAc9H,EAAQ6B,MAAK,SAAAV,GAAG,OAAIA,EAAIG,OAASjB,CAAK,IACtDyH,IACAxH,GAAS,SAAAc,GAAQ,wBAAQA,GAAQ,CAAEf,GAAQ,IAC3CwG,GAAY,SAAAzF,GAAQ,wBAAQA,GAAQ,CAAE0G,EAAYC,UAAW,IAC7DhB,GAAQ,SAAA3F,GAAQ,wBAAQA,GAAQ,CAAE0G,EAAYhB,MAAO,IACrDG,GAAS,SAAA7F,GAAQ,wBAAQA,GAAQ,CAAE0G,EAAYE,KAAM,IAE7D,IAEA,MAEJ,IAAK,MACDhI,EAAQkB,KAAI,SAAAC,GACRb,GAAS,SAAAc,GAAQ,wBAAQA,GAAQ,CAAED,EAAIG,MAAO,IAC9CuF,GAAY,SAAAzF,GAAQ,wBAAQA,GAAQ,CAAED,EAAI4G,UAAW,IACrDhB,GAAQ,SAAA3F,GAAQ,wBAAQA,GAAQ,CAAED,EAAI2F,MAAO,IAC7CG,GAAS,SAAA7F,GAAQ,wBAAQA,GAAQ,CAAED,EAAI6G,KAAM,GACjD,IAEA,MAEJ,IAAK,QACqBhI,EAAQyB,QAAO,SAACC,EAAKC,GACvC,IAAMC,EAAeF,EAAIG,MAAK,SAACC,GAAE,OAAKA,EAAGC,OAASJ,EAAKI,IAAI,IAS3D,OARIH,GACAA,EAAaqG,WAAyC,OAA5B9F,WAAWR,EAAKoG,UAC1CnG,EAAasG,UAAY/F,WAAWR,EAAKmF,MACzClF,EAAauG,SAAWhG,WAAWR,EAAKqG,KACxCpG,EAAawG,OAAS,GAEtB1G,EAAIY,KAAK,CAAEP,KAAMJ,EAAKI,KAAMkG,UAA2B,OAAhBtG,EAAKoG,SAAoBG,SAAUvG,EAAKmF,KAAMqB,QAASxG,EAAKqG,IAAKI,MAAO,IAE5G1G,CACX,GAAG,IAEWR,KAAI,SAAAC,GACdb,GAAS,SAAAc,GAAQ,wBAAQA,GAAQ,CAAED,EAAIY,MAAO,IAC9C8E,GAAY,SAAAzF,GAAQ,wBAAQA,GAAQ,CAAED,EAAI8G,WAAY,IACtDlB,GAAQ,SAAA3F,GAAQ,wBAAQA,GAAQ,CAAED,EAAI+G,SAAW/G,EAAIiH,OAAQ,IAC7DnB,GAAS,SAAA7F,GAAQ,wBAAQA,GAAQ,CAAED,EAAIgH,QAAUhH,EAAIiH,OAAQ,GACjE,IAEA,MAEJ,IAAK,OAQD,IAPA,IAAM7F,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE5H8F,EAAa,CAAC,EACdC,EAAc,CAAC,EACfC,EAAa,CAAC,EACd9F,EAAe,CAAC,EAEbG,EAAI,EAAGA,EAAI5C,EAAQ6C,OAAQD,IAAK,CACrC,IAAME,EAAY9C,EAAQ4C,GAAGb,KAAKgB,MAAM,KAClCC,EAAaT,EAAWU,QAAQH,EAAU,IAC1CI,EAAOJ,EAAU,GACjBK,EAAS,UAAMZ,EAAWS,GAAW,YAAIE,GACzC0D,EAAW5G,EAAQ4C,GAAGmF,SACtBjB,EAAO9G,EAAQ4C,GAAGkE,KAClBE,EAAQhH,EAAQ4C,GAAGoF,IAErBK,EAAWlF,IACXkF,EAAWlF,IAAcyD,EACzB0B,EAAYnF,IAAc2D,EAC1ByB,EAAWpF,IAAc6D,EACzBvE,EAAaU,OAEbkF,EAAWlF,GAAayD,EACxB0B,EAAYnF,GAAa2D,EACzByB,EAAWpF,GAAa6D,EACxBvE,EAAaU,GAAa,EAElC,CAEA,IAAMG,EAAc,GACpB,IAAK,IAAMH,KAAakF,EAAY,CAChC,MAA0BlF,EAAUJ,MAAM,KAAI,eAAvCQ,EAAS,KACVC,GADgB,KACRjB,EAAWU,QAAQM,GAAa,GACxCqD,EAAmC,OAAxByB,EAAWlF,GACtB2D,EAAOwB,EAAYnF,GAAaV,EAAaU,GAC7C6D,EAAQuB,EAAWpF,GAAaV,EAAaU,GACnDG,EAAYhB,KAAK,CAAEkB,MAAOjB,EAAWiB,EAAQ,GAAIoD,SAAUA,EAAUE,KAAMA,EAAMkB,IAAKhB,GAC1F,CAEA1D,EAAYpC,KAAI,SAAAC,GACZ0F,GAAY,SAAAzF,GAAQ,wBAAQA,GAAQ,CAAED,EAAIyF,UAAW,IACrDG,GAAQ,SAAA3F,GAAQ,wBAAQA,GAAQ,CAAED,EAAI2F,MAAO,IAC7CG,GAAS,SAAA7F,GAAQ,wBAAQA,GAAQ,CAAED,EAAI6G,KAAM,IAC7C1H,GAAS,SAAAc,GAAQ,wBAAQA,GAAQ,CAAED,EAAIqC,OAAQ,GACnD,IAEA,MAEJ,QACI,OAKZ,CAFE,SAEF,CACJ,GAAG,CAACxD,EAASE,IAIb,IAAM4D,EAAU,CACZC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,CACTC,WAAW,EACXC,KAAM,SAEVc,QAAS,CACLC,OAAQ,CACJL,SAAU,UAEdY,MAAO,CACHN,SAAS,EACTK,KAAe,QAATtF,EAAiB,wBAA0B,gCACjDwF,KAAM,CACFC,KAAM,KAGdC,KAAM,CACFC,IAAK,CACDC,SAAS,EACT3B,KAAM,KAEVyB,KAAM,CACFG,MAAO,CACHD,SAAS,GAEbE,MAAO,CACHF,SAAS,GAEb3B,KAAM,OAIlBC,OAAQ,CACJC,EAAG,CACCG,KAAM,WACNC,MAAO,CACHC,YAAa,EACbC,gBAAiB,KAGzBJ,EAAG,CACCC,KAAM,SACNK,SAAU,SAEdC,GAAI,CACAN,KAAM,SACNK,SAAU,UAOhB5E,EAAO,CACTmF,OAHW/E,EAIX+F,SAAU,CACN,CAEI5B,KAAe,QAATtE,EAAiB,UAAY,OACnCG,MAAO,sBACPgG,gBAAiB,oBACjBpG,KAAe,QAATC,EAAiBF,EAAQkB,KAAI,SAAAsH,GAAK,MAAK,CACzCnE,EAAGmE,EAAMlH,KACTiD,EAAGiE,EAAM1B,KACZ,IAAKA,EACNR,YAAa,oBACbC,QAAS,MAEb,CAEI/B,KAAe,QAATtE,EAAiB,UAAY,OACnCG,MAAO,sBACPgG,gBAAiB,uBACjBpG,KAAe,QAATC,EAAiBF,EAAQkB,KAAI,SAAAsH,GAAK,MAAK,CACzCnE,EAAGmE,EAAMlH,KACTiD,EAAGiE,EAAMR,IACZ,IAAKhB,EACNV,YAAa,uBACbC,QAAS,KAEb,CAEI/B,KAAe,QAATtE,EAAiB,UAAqB,QAATA,EAAiB,OAAS,MAC7DG,MAAgB,QAATH,EAAiB,YAAc,cACtCD,KAAe,QAATC,EAAiBF,EAAQkB,KAAI,SAAAsH,GAAK,MAAK,CACzCnE,EAAGmE,EAAMlH,KACTiD,EAAGiE,EAAMT,SACZ,IAAKnB,EACNP,gBAAiB,qBACjBC,YAAa,qBACbC,QAAS,QAKrB,OAAO,SAAC,KAAK,CAACzC,QAASA,EAAS7D,KAAMA,GAC1C,EChQA,SAASwI,EAAS1I,GAChB,OAAwCK,EAAAA,EAAAA,UAAS,IAAIsH,MAAO,eAArDgB,EAAY,KAAEC,EAAe,KACpC,GAA4CvI,EAAAA,EAAAA,WAAS,GAAM,eAApDwI,EAAc,KAAEC,EAAiB,KAClCC,EAAU,IAAIpB,KAAK,KAAM,EAAG,IAClC,GAAgCtH,EAAAA,EAAAA,UAAS,OAAM,eAAxCD,EAAQ,KAAE4I,EAAW,KAC5B,GAAoC3I,EAAAA,EAAAA,UAAS,CAAEoD,MAAO,OAAQJ,IAAK,UAAWF,KAAM,YAAY,eAAzF8F,EAAU,KAAEC,EAAa,KAS1BC,EAAc,SAAH,GAAW,EAALC,MAAN,IAAaC,EAAO,EAAPA,QAAO,OACnC,SAAC,MAAa,CAACC,UAAU,mBAAmBD,QAASA,GAAW,EAE5DE,EAAuB,SAACnF,GAC5B4E,EAAY5E,GAEV8E,EADW,UAAT9E,EACY,CAAEX,MAAO,OAAQN,KAAM,WACnB,SAATiB,EACK,CAAEjB,KAAM,WAER,CAAEM,MAAO,OAAQJ,IAAK,UAAWF,KAAM,WAEzD,EAEMY,EAAUkF,EACVO,EAAgBb,EAAac,mBAAmB,QAAS1F,GAEzD2F,EAAU1J,EAAME,KAEhByJ,EAAaD,EAAQpE,QAAO,SAAAlE,GAChC,IAAMwI,EAAU,IAAIjC,KAAKvG,EAAIY,MACvByB,EAAQmG,EAAQC,WAChBxG,EAAMuG,EAAQE,UACd3G,EAAOyG,EAAQG,cAEfC,EAAQ,IAAIrC,KAAK6B,GACjBS,EAASD,EAAMH,WACfK,EAAOF,EAAMF,UACbK,EAAQH,EAAMD,cAEpB,OAAQ3J,GACN,IAAK,MAML,QACE,OAAOqD,IAAUwG,GAAU5G,IAAQ6G,GAAQ/G,IAASgH,EALtD,IAAK,QACH,OAAO1G,IAAUwG,GAAU9G,IAASgH,EACtC,IAAK,OACH,OAAOhH,IAASgH,EAItB,IAEA,OACE,iBAAKb,UAAU,qBAAoB,WACjC,gBAAKA,UAAU,iCAAgC,UAC7C,eAAIA,UAAU,OAAM,SAAC,uBAEvB,iBAAKA,UAAU,8CAA6C,WAC1D,gBAAKA,UAAU,iCAAgC,UAC7C,iBAAKA,UAAU,8EAA6E,WAC1F,SAACH,EAAW,CAACE,QAzDE,WACvBP,GAAmBD,EACrB,KAwDU,eAAIS,UAAU,OAAM,SAAEE,SAEpB,SACN,iBAAKF,UAAU,4DAA2D,WACxE,mBAAQA,UAAwB,QAAblJ,EAAqB,6CAA+C,oBAAqBiJ,QAAS,kBAAME,EAAqB,MAAM,EAAC,SAAC,SACxJ,mBAAQD,UAAwB,UAAblJ,EAAuB,6CAA+C,oBAAqBiJ,QAAS,kBAAME,EAAqB,QAAQ,EAAC,SAAC,WAC5J,mBAAQD,UAAwB,SAAblJ,EAAsB,6CAA+C,oBAAqBiJ,QAAS,kBAAME,EAAqB,OAAO,EAAC,SAAC,UAC1J,mBAAQD,UAAwB,QAAblJ,EAAqB,6CAA+C,oBAAqBiJ,QAAS,kBAAME,EAAqB,MAAM,EAAC,SAAC,cAI3JV,IACC,gBAAKS,UAAU,qBAAoB,UACjC,SAAC,IAAU,CACTc,SAAUzB,EACV0B,SAtEW,SAACrI,GACpB4G,EAAgB5G,GAChB8G,GAAkB,EACpB,EAoEUwB,oBAAkC,UAAblK,EACrBmK,eAA6B,SAAbnK,EAChBoK,aAAa,wBACbC,gBAAgB,YAChBC,QAAM,EACN3B,QAASA,EACT4B,QAAS,IAAIhD,UAKnB,iBAAK2B,UAAU,wBAAuB,WAcpC,gBAAKA,UAAU,aAAY,UACzB,SAAC,EAAe,CAACpJ,KAAmB,QAAbE,EAAqBsJ,EAAUC,EAAYvJ,SAAUA,EAAUkJ,UAAU,aAIlG,gBAAKA,UAAU,QAAO,UACpB,SAAC,EAAc,CAACpJ,KAAMyJ,EAAYvJ,SAAUA,EAAUkJ,UAAU,iBAK1E,CAEA,OAAesB,EAAAA,EAAAA,MAAKlC,E","sources":["charts/energyChart.js","charts/chargingChart.js","charts/battLevelChart.js","charts/productionChart.js","components/analysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\nconst EnergyChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [dataSys, setDataSys] = useState([]);\r\n    const [dataCons, setDataCons] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setDataSys([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.pv_power]);\r\n                        setDataCons(prevList => [...prevList, row.pv_power]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.pv_gen += parseFloat(item.pv_power) * 0.08333;\r\n                        } else {\r\n                            acc.push({ date: item.date, pv_gen: item.pv_power * 0.08333 });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.pv_gen]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const sumByDate = {};\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const value = sysData[i].pv_power;\r\n                        if (sumByDate[yearMonth]) {\r\n                            sumByDate[yearMonth] += value;\r\n                        } else {\r\n                            sumByDate[yearMonth] = value;\r\n                        }\r\n                    }\r\n\r\n                    const sumByMonth = {};\r\n                    for (const date in sumByDate) {\r\n                        const yearMonth = date;\r\n                        const value = sumByDate[date];\r\n                        if (sumByMonth[yearMonth]) {\r\n                            sumByMonth[yearMonth] += value;\r\n                        } else {\r\n                            sumByMonth[yearMonth] = value;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in sumByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const sum = sumByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], sum });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.sum]);\r\n                        setDataCons(prevList => [...prevList, row.sum]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n            intersect: false,\r\n            mode: 'index',\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Energy (Wh)',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {   \r\n                type: 'line',\r\n                label: 'Generate (Wh)',\r\n                data: dataSys,\r\n                backgroundColor: 'rgba(255, 99, 132, 1)',\r\n                borderColor: 'rgba(255, 99, 132, 1)',\r\n            },\r\n            // {\r\n            //     label: 'Consumption',\r\n            //     data: dataCons,\r\n            //     backgroundColor: 'rgba(53, 162, 235, 1)',\r\n            // },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default EnergyChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    zoomPlugin\r\n);\r\n\r\nconst ChargingChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [charge, setCharge] = useState([]);\r\n    const [discharge, setDischarge] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setCharge([]);\r\n            setDischarge([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setCharge(prevList => [...prevList, row.pv_power]);\r\n                        setDischarge(prevList => [...prevList, row.pv_power]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.sys_value += parseFloat(item.pv_power);\r\n                            existingItem.cons_value += parseFloat(item.pv_power);\r\n                        } else {\r\n                            acc.push({ date: item.date, sys_value: item.pv_power, cons_value: item.pv_power });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                   byMonthFilter.map(row => {\r\n                    setCharge(prevList => [...prevList, row.sys_value]);\r\n                    setDischarge(prevList => [...prevList, row.cons_value]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n                    \r\n                    break\r\n\r\n                case 'year':\r\n                    return;\r\n\r\n                default:\r\n                    return; \r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Charge-Discharge Time',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Charging',\r\n                data: charge,\r\n                backgroundColor: 'rgba(22, 160, 133, 1)',\r\n            },\r\n            {\r\n                label: 'Discharging',\r\n                data: discharge,\r\n                backgroundColor: 'rgba(207, 0, 15, 1)',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Bar options={options} data={data} />;\r\n};\r\n\r\nexport default ChargingChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\nconst BattLevelChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [level, setLevel] = useState([]);\r\n    const [lamp, setLamp] = useState([]);\r\n    const [status, setStatus] = useState([]);\r\n\r\n    const [maxlevel, setMaxLevel] = useState([]);\r\n    const [minlevel, setMinLevel] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setLevel([]);\r\n            setLamp([]);\r\n            setStatus([]);\r\n\r\n            setMaxLevel([]);\r\n            setMinLevel([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setLevel(prevList => [...prevList, row.batt_level]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                        setLamp(prevList => [...prevList, row.led_status]);\r\n                        setStatus(prevList => [...prevList, row.charging]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    // const byMonthFilter = sysData.reduce((acc, item) => {\r\n                    //     const existingItem = acc.find((el) => el.date === item.date);\r\n                    //     if (existingItem) {\r\n                    //         existingItem.level = Math.max(existingItem.level, parseFloat(item.batt_level));\r\n                    //     } else {\r\n                    //         acc.push({ date: item.date, level: item.batt_level });\r\n                    //     }\r\n                    //     return acc;\r\n                    // }, []);\r\n\r\n                    // byMonthFilter.map(row => {\r\n                    //     setLevel(prevList => [...prevList, row.level]);\r\n                    //     setLabel(prevList => [...prevList, row.date]);\r\n                    // });\r\n\r\n                    const byDayFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.maxLevel = Math.max(existingItem.maxLevel, parseFloat(item.batt_level));\r\n                            existingItem.minLevel = Math.min(existingItem.minLevel, parseFloat(item.batt_level));\r\n                        } else {\r\n                            acc.push({ date: item.date, maxLevel: parseFloat(item.batt_level), minLevel: parseFloat(item.batt_level) });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byDayFilter.map(row => {\r\n                        setMaxLevel(prevList => [...prevList, row.maxLevel]);\r\n                        setMinLevel(prevList => [...prevList, row.minLevel]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    // const levelByMonth = {};\r\n                    // const countByMonth = {};\r\n\r\n                    // for (let i = 0; i < sysData.length; i++) {\r\n                    //     const dateParts = sysData[i].date.split(' ');\r\n                    //     const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                    //     const year = dateParts[2];\r\n                    //     const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                    //     const level = sysData[i].batt_level;\r\n\r\n                    //     if (levelByMonth[yearMonth]) {\r\n                    //         levelByMonth[yearMonth] += level;\r\n                    //         countByMonth[yearMonth]++;\r\n                    //     } else {\r\n                    //         levelByMonth[yearMonth] = level;\r\n                    //         countByMonth[yearMonth] = 1;\r\n                    //     }\r\n                    // }\r\n\r\n                    // const resultArray = [];\r\n                    // for (const yearMonth in levelByMonth) {\r\n                    //     const [monthName, year] = yearMonth.split('-');\r\n                    //     const month = monthNames.indexOf(monthName) + 1;\r\n                    //     const level = levelByMonth[yearMonth] / countByMonth[yearMonth];\r\n                    //     resultArray.push({ month: monthNames[month - 1], level: level });\r\n                    // }\r\n\r\n                    // resultArray.map(row => {\r\n                    //     setLevel(prevList => [...prevList, row.level]);\r\n                    //     setLabel(prevList => [...prevList, row.month]);\r\n                    // });\r\n\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const levelsByMonth = {};\r\n                    const countByMonth = {};\r\n                    const sumMaxByMonth = {};\r\n                    const sumMinByMonth = {};\r\n\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const day = parseInt(dateParts[1]);\r\n                        const level = parseFloat(sysData[i].batt_level);\r\n\r\n                        if (!levelsByMonth[yearMonth]) {\r\n                            levelsByMonth[yearMonth] = {};\r\n                            countByMonth[yearMonth] = {};\r\n                            sumMaxByMonth[yearMonth] = {};\r\n                            sumMinByMonth[yearMonth] = {};\r\n                        }\r\n\r\n                        if (!levelsByMonth[yearMonth][day]) {\r\n                            levelsByMonth[yearMonth][day] = [];\r\n                            countByMonth[yearMonth][day] = 0;\r\n                            sumMaxByMonth[yearMonth][day] = 0;\r\n                            sumMinByMonth[yearMonth][day] = 0;\r\n                        }\r\n\r\n                        levelsByMonth[yearMonth][day].push(level);\r\n                        countByMonth[yearMonth][day]++;\r\n                        sumMaxByMonth[yearMonth][day] += level;\r\n                        sumMinByMonth[yearMonth][day] += level;\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in levelsByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const maxLevels = [];\r\n                        const minLevels = [];\r\n\r\n                        for (const day in levelsByMonth[yearMonth]) {\r\n                            const maxLevel = Math.max(...levelsByMonth[yearMonth][day]);\r\n                            const minLevel = Math.min(...levelsByMonth[yearMonth][day]);\r\n                            maxLevels.push(maxLevel);\r\n                            minLevels.push(minLevel);\r\n                        }\r\n\r\n                        const averageMaxLevel = maxLevels.reduce((acc, val) => acc + val, 0) / maxLevels.length;\r\n                        const averageMinLevel = minLevels.reduce((acc, val) => acc + val, 0) / minLevels.length;\r\n\r\n                        resultArray.push({ month: monthNames[month - 1], averageMaxLevel, averageMinLevel });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setMaxLevel(prevList => [...prevList, row.averageMaxLevel]);\r\n                        setMinLevel(prevList => [...prevList, row.averageMinLevel]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n            intersect: false,\r\n            mode: 'index',\r\n        },\r\n\r\n        scales: view !== 'day' ? {\r\n            x: {\r\n                stacked: true,\r\n            },\r\n            y: {\r\n                min: 0,\r\n                max: 100,\r\n            }\r\n        }\r\n            : {\r\n                x: {\r\n                    type: 'category',\r\n                    ticks: {\r\n                        maxRotation: 0,\r\n                        autoSkipPadding: 50,\r\n                    },\r\n                },\r\n                y2: {\r\n                    type: 'linear',\r\n                    position: 'left',\r\n                    min: 0,\r\n                    max: 100,\r\n                },\r\n                y1: {\r\n                    type: 'linear',\r\n                    offset: true,\r\n                    position: 'right',\r\n                    min: 0,\r\n                    max: 1,\r\n                    ticks: {\r\n                        stepSize: 1,\r\n                    }\r\n                }\r\n            },\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom',\r\n                display: true,\r\n                labels: {\r\n                    filter: function (legendItem, chartData) {\r\n                        if (view !== 'day' && (legendItem.text === 'Lamp' || legendItem.text === 'Charging')) {\r\n                            return false; // Hide Lamp and Charge legends when view is not 'day'\r\n                        }\r\n                        return true; // Display other legends\r\n                    },\r\n                },\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: view === 'day' ? 'Battery Level, Charging & LED Status' : view === 'month' ? 'Battery Level' : 'Average Battery Level',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            },\r\n            clip: {\r\n                left: 25, // Adjust the number of initially visible data points\r\n                right: 25, // Adjust the number of initially visible data points\r\n            },\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: view !== 'day' ?\r\n            [\r\n                {\r\n                    type: 'bar',\r\n                    label: 'Maximum',\r\n                    data: maxlevel,\r\n                    backgroundColor: 'rgba(9, 15, 30, 0.5)',\r\n                    borderColor: 'rgba(9, 15, 30, 1)',\r\n                    yAxisID: 'y',\r\n                    // fill: true\r\n                },\r\n                {\r\n                    type: 'bar',\r\n                    label: 'Minimum',\r\n                    data: minlevel,\r\n                    backgroundColor: 'rgba(28, 164, 63, 1)',\r\n                    borderColor: 'rgba(28, 164, 63, 1)',\r\n                    yAxisID: 'y',\r\n                    // fill: true\r\n                },\r\n            ]\r\n            : [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Lamp',\r\n                    data: lamp,\r\n                    backgroundColor: 'rgb(243, 156, 18, 0.8)',\r\n                    borderColor: 'rgb(243, 156, 18, 0.8)',\r\n                    yAxisID: 'y1',\r\n                    stepped: true,\r\n                    order: 1,\r\n                },\r\n                {\r\n                    type: 'line',\r\n                    label: 'Charging',\r\n                    data: status,\r\n                    backgroundColor: 'rgba(28, 164, 63, 0.8)',\r\n                    borderColor: 'rgba(28, 164, 63, 0.8)',\r\n                    yAxisID: 'y1',\r\n                    stepped: true,\r\n                    order: 1,\r\n                },\r\n                {\r\n                    type: view === 'day' ? 'line' : 'bar',\r\n                    label: 'Level (%)',\r\n                    data: level,\r\n                    backgroundColor: 'rgba(9, 15, 30, 0.8)',\r\n                    borderColor: 'rgba(9, 15, 30, 0.8)',\r\n                    yAxisID: 'y2',\r\n                    order: 2,\r\n                    fill: true\r\n                },\r\n            ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default BattLevelChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    ScatterController\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    ScatterController,\r\n    zoomPlugin\r\n);\r\n\r\n\r\nconst ProductionChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [generate, setGenerate] = useState([]);\r\n    const [temp, setTemp] = useState([]);\r\n    const [light, setLight] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setGenerate([]);\r\n            setTemp([]);\r\n            setLight([]);\r\n\r\n            switch (view) {\r\n                case 'all':\r\n                    const uniqueLabels = Array.from(new Set(sysData.map(row => row.time)));\r\n\r\n                    // Sort the unique labels in a 24-hour format\r\n                    uniqueLabels.sort((a, b) => {\r\n                        const timeA = new Date(`1970-01-01T${a}`);\r\n                        const timeB = new Date(`1970-01-01T${b}`);\r\n                        return timeA.getTime() - timeB.getTime();\r\n                    });\r\n\r\n                    // Use the filtered and sorted labels to populate the state variables\r\n                    uniqueLabels.forEach(label => {\r\n                        const matchingRow = sysData.find(row => row.time === label);\r\n                        if (matchingRow) {\r\n                            setLabel(prevList => [...prevList, label]);\r\n                            setGenerate(prevList => [...prevList, matchingRow.pv_power]);\r\n                            setTemp(prevList => [...prevList, matchingRow.temp]);\r\n                            setLight(prevList => [...prevList, matchingRow.lux]);\r\n                        }\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                        setGenerate(prevList => [...prevList, row.pv_power]);\r\n                        setTemp(prevList => [...prevList, row.temp]);\r\n                        setLight(prevList => [...prevList, row.lux]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.sys_power += parseFloat(item.pv_power) * 0.08333;\r\n                            existingItem.sys_temp += parseFloat(item.temp);\r\n                            existingItem.sys_lux += parseFloat(item.lux);\r\n                            existingItem.count += 1;\r\n                        } else {\r\n                            acc.push({ date: item.date, sys_power: item.pv_power * 0.08333, sys_temp: item.temp, sys_lux: item.lux, count: 1 });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                        setGenerate(prevList => [...prevList, row.sys_power]);\r\n                        setTemp(prevList => [...prevList, row.sys_temp / row.count]);\r\n                        setLight(prevList => [...prevList, row.sys_lux / row.count]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const genByMonth = {};\r\n                    const tempByMonth = {};\r\n                    const luxByMonth = {};\r\n                    const countByMonth = {};\r\n\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const generate = sysData[i].pv_power;\r\n                        const temp = sysData[i].temp;\r\n                        const light = sysData[i].lux;\r\n\r\n                        if (genByMonth[yearMonth]) {\r\n                            genByMonth[yearMonth] += generate;\r\n                            tempByMonth[yearMonth] += temp;\r\n                            luxByMonth[yearMonth] += light;\r\n                            countByMonth[yearMonth]++;\r\n                        } else {\r\n                            genByMonth[yearMonth] = generate;\r\n                            tempByMonth[yearMonth] = temp;\r\n                            luxByMonth[yearMonth] = light;\r\n                            countByMonth[yearMonth] = 1;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in genByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const generate = genByMonth[yearMonth] * 0.08333;\r\n                        const temp = tempByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        const light = luxByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], generate: generate, temp: temp, lux: light });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setGenerate(prevList => [...prevList, row.generate]);\r\n                        setTemp(prevList => [...prevList, row.temp]);\r\n                        setLight(prevList => [...prevList, row.lux]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n            intersect: false,\r\n            mode: 'index',\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: view === 'day' ? \"Solar PV Panel Output\" : \"Average Solar PV Panel Output\",\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            }\r\n        },\r\n        scales: {\r\n            x: {\r\n                type: 'category',\r\n                ticks: {\r\n                    maxRotation: 0,\r\n                    autoSkipPadding: 50,\r\n                },\r\n            },\r\n            y: {\r\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n                position: 'right',\r\n            },\r\n            y1: {\r\n                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n                position: 'left',\r\n            },\r\n        }\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                // fill: true,\r\n                type: view === 'all' ? 'scatter' : 'line',\r\n                label: 'Temperature (°C)',\r\n                backgroundColor: 'rgb(4, 59, 92, 1)',\r\n                data: view === 'all' ? sysData.map(point => ({\r\n                    x: point.time,\r\n                    y: point.temp\r\n                })) : temp,\r\n                borderColor: 'rgb(4, 59, 92, 1)',\r\n                yAxisID: 'y1',\r\n            },\r\n            {\r\n                // fill: true,\r\n                type: view === 'all' ? 'scatter' : 'line',\r\n                label: 'Ambient Light (lux)',\r\n                backgroundColor: 'rgb(22, 160, 133, 1)',\r\n                data: view === 'all' ? sysData.map(point => ({\r\n                    x: point.time,\r\n                    y: point.lux\r\n                })) : light,\r\n                borderColor: 'rgb(22, 160, 133, 1)',\r\n                yAxisID: 'y',\r\n            },\r\n            {\r\n                // fill: true,\r\n                type: view === 'all' ? 'scatter' : view === 'day' ? 'line' : 'bar',\r\n                label: view === 'day' ? 'Power (W)' : 'Energy (Wh)',\r\n                data: view === 'all' ? sysData.map(point => ({\r\n                    x: point.time,\r\n                    y: point.pv_power\r\n                })) : generate,\r\n                backgroundColor: 'rgb(207, 0, 15, 1)',\r\n                borderColor: 'rgb(207, 0, 15, 1)',\r\n                yAxisID: 'y1',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default ProductionChart;","import React, { useState, memo } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { FaCalendarAlt } from 'react-icons/fa';\r\nimport EnergyChart from '../charts/energyChart';\r\nimport ChargingChart from '../charts/chargingChart';\r\nimport BattLevelChart from '../charts/battLevelChart';\r\nimport ProductionChart from '../charts/productionChart';\r\n\r\nfunction Analysis(props) {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [showDatePicker, setShowDatePicker] = useState(false);\r\n  const minDate = new Date(2023, 4, 28);\r\n  const [viewMode, setViewMode] = useState('day');\r\n  const [dateFormat, setDateFormat] = useState({ month: 'long', day: 'numeric', year: 'numeric' });\r\n\r\n  const toggleDatePicker = () => {\r\n    setShowDatePicker(!showDatePicker);\r\n  };\r\n  const handleChange = (date) => {\r\n    setSelectedDate(date);\r\n    setShowDatePicker(false);\r\n  };\r\n  const CustomInput = ({ value, onClick }) => (\r\n    <FaCalendarAlt className=\"date-picker-icon\" onClick={onClick} />\r\n  );\r\n  const handleViewModeChange = (mode) => {\r\n    setViewMode(mode);\r\n    if (mode === 'month') {\r\n      setDateFormat({ month: 'long', year: 'numeric' });\r\n    } else if (mode === 'year') {\r\n      setDateFormat({ year: 'numeric' });\r\n    } else {\r\n      setDateFormat({ month: 'long', day: 'numeric', year: 'numeric' });\r\n    }\r\n  };\r\n\r\n  const options = dateFormat;\r\n  const formattedDate = selectedDate.toLocaleDateString('en-US', options);\r\n\r\n  const allData = props.data;\r\n  //Filtered Data by Date\r\n  const filterData = allData.filter(row => {\r\n    const logDate = new Date(row.date);\r\n    const month = logDate.getMonth();\r\n    const day = logDate.getDate();\r\n    const year = logDate.getFullYear();\r\n\r\n    const fDate = new Date(formattedDate);\r\n    const fMonth = fDate.getMonth();\r\n    const fday = fDate.getDate();\r\n    const fYear = fDate.getFullYear();\r\n\r\n    switch (viewMode) {\r\n      case 'day':\r\n        return month === fMonth && day === fday && year === fYear;\r\n      case 'month':\r\n        return month === fMonth && year === fYear;\r\n      case 'year':\r\n        return year === fYear;\r\n      default:\r\n        return month === fMonth && day === fday && year === fYear;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className='analysis-container'>\r\n      <div className='d-flex align-items-center my-0'>\r\n        <h3 className='my-0'>System Analysis</h3>\r\n      </div>\r\n      <div className='date-view-wrapper d-flex align-items-center'>\r\n        <div className='analysis-date-picker w-50 py-1'>\r\n          <div className='date-picker-container d-flex justify-content-start align-items-center gap-2'>\r\n            <CustomInput onClick={toggleDatePicker} />\r\n            <h6 className='my-0'>{formattedDate}</h6>\r\n          </div>\r\n        </div>     {/** DATE PICKER */}\r\n        <div className='analysis-date-type w-100 d-flex justify-content-end gap-2'>\r\n          <button className={viewMode === 'day' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('day')}>Day</button>\r\n          <button className={viewMode === 'month' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('month')}>Month</button>\r\n          <button className={viewMode === 'year' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('year')}>Year</button>\r\n          <button className={viewMode === 'all' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('all')}>All</button>\r\n        </div>\r\n      </div>\r\n\r\n      {showDatePicker && (\r\n        <div className=\"calendar-container\">\r\n          <DatePicker\r\n            selected={selectedDate}\r\n            onChange={handleChange}\r\n            showMonthYearPicker={viewMode === 'month'}\r\n            showYearPicker={viewMode === 'year'}\r\n            customInput={<></>}\r\n            popperPlacement=\"top-start\"\r\n            inline\r\n            minDate={minDate}\r\n            maxDate={new Date()}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className='analysis-section mt-3'>\r\n        {/******* ENERGY CHART ***************************************************/}\r\n\r\n        {/* <div className='chart energy-chart mb-4'>\r\n          <EnergyChart data={filterData} viewMode={viewMode} />\r\n        </div> */}\r\n\r\n        {/******* CHARGING CHART **************************************************/}\r\n        {/* <div className='chart mb-4'>\r\n          <ChargingChart data={filterData} viewMode={viewMode} />\r\n        </div> */}\r\n\r\n\r\n        {/******* ENERGY ANALYSIS CHART COMBINED **********************************/}\r\n        <div className='chart mb-4'>\r\n          <ProductionChart data={viewMode === 'all' ? allData : filterData} viewMode={viewMode} className='chart' />\r\n        </div>\r\n\r\n        {/******* BATTERY LEVEL ANALYSIS CHART ************************************/}\r\n        <div className='chart'>\r\n          <BattLevelChart data={filterData} viewMode={viewMode} className='chart' />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Analysis);"],"names":["ChartJS","LinearScale","CategoryScale","BarElement","PointElement","LineElement","Legend","Tooltip","Filler","LineController","BarController","zoomPlugin","Title","props","sysData","data","view","viewMode","useState","label","setLabel","level","setLevel","lamp","setLamp","status","setStatus","maxlevel","setMaxLevel","minlevel","setMinLevel","useEffect","map","row","prevList","batt_level","time","led_status","charging","reduce","acc","item","existingItem","find","el","date","maxLevel","Math","max","parseFloat","minLevel","min","push","monthNames","levelsByMonth","countByMonth","sumMaxByMonth","sumMinByMonth","i","length","dateParts","split","monthIndex","indexOf","year","yearMonth","day","parseInt","resultArray","monthName","month","maxLevels","minLevels","averageMaxLevel","val","averageMinLevel","options","responsive","maintainAspectRatio","interaction","intersect","mode","scales","x","stacked","y","type","ticks","maxRotation","autoSkipPadding","y2","position","y1","offset","stepSize","plugins","legend","display","labels","filter","legendItem","chartData","text","title","font","size","zoom","pan","enabled","pinch","wheel","clip","left","right","datasets","backgroundColor","borderColor","yAxisID","stepped","order","fill","ScatterController","generate","setGenerate","temp","setTemp","light","setLight","uniqueLabels","Array","from","Set","sort","a","b","timeA","Date","timeB","getTime","forEach","matchingRow","pv_power","lux","sys_power","sys_temp","sys_lux","count","genByMonth","tempByMonth","luxByMonth","point","Analysis","selectedDate","setSelectedDate","showDatePicker","setShowDatePicker","minDate","setViewMode","dateFormat","setDateFormat","CustomInput","value","onClick","className","handleViewModeChange","formattedDate","toLocaleDateString","allData","filterData","logDate","getMonth","getDate","getFullYear","fDate","fMonth","fday","fYear","selected","onChange","showMonthYearPicker","showYearPicker","customInput","popperPlacement","inline","maxDate","memo"],"sourceRoot":""}