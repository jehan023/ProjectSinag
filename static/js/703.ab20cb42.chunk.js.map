{"version":3,"file":"static/js/703.ab20cb42.chunk.js","mappings":"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","sources":["charts/energyChart.js","charts/chargingChart.js","charts/battLevelChart.js","charts/productionChart.js","components/analysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    zoomPlugin\r\n);\r\n\r\nconst EnergyChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [dataSys, setDataSys] = useState([]);\r\n    const [dataCons, setDataCons] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setDataSys([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.pv_power]);\r\n                        setDataCons(prevList => [...prevList, row.pv_power]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.pv_gen += parseFloat(item.pv_power)*0.16667;\r\n                        } else {\r\n                            acc.push({ date: item.date, pv_gen: item.pv_power*0.16667 });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.pv_gen]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const sumByDate = {};\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const value = sysData[i].pv_power;\r\n                        if (sumByDate[yearMonth]) {\r\n                            sumByDate[yearMonth] += value;\r\n                        } else {\r\n                            sumByDate[yearMonth] = value;\r\n                        }\r\n                    }\r\n\r\n                    const sumByMonth = {};\r\n                    for (const date in sumByDate) {\r\n                        const yearMonth = date;\r\n                        const value = sumByDate[date];\r\n                        if (sumByMonth[yearMonth]) {\r\n                            sumByMonth[yearMonth] += value;\r\n                        } else {\r\n                            sumByMonth[yearMonth] = value;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in sumByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const sum = sumByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], sum });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setDataSys(prevList => [...prevList, row.sum]);\r\n                        setDataCons(prevList => [...prevList, row.sum]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Energy (Wh)',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                // zoom: {\r\n                //     pinch: {\r\n                //         enabled: true       // Enable pinch zooming\r\n                //     },\r\n                //     wheel: {\r\n                //         enabled: true       // Enable wheel zooming\r\n                //     },\r\n                //     mode: 'x',\r\n                // }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Generate',\r\n                data: dataSys,\r\n                backgroundColor: 'rgba(255, 99, 132, 1)',\r\n            },\r\n            // {\r\n            //     label: 'Consumption',\r\n            //     data: dataCons,\r\n            //     backgroundColor: 'rgba(53, 162, 235, 1)',\r\n            // },\r\n        ],\r\n    };\r\n\r\n    return <Bar options={options} data={data} />;\r\n};\r\n\r\nexport default EnergyChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    zoomPlugin\r\n);\r\n\r\nconst ChargingChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [charge, setCharge] = useState([]);\r\n    const [discharge, setDischarge] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setCharge([]);\r\n            setDischarge([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setCharge(prevList => [...prevList, row.pv_power]);\r\n                        setDischarge(prevList => [...prevList, row.pv_power]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.sys_value += parseFloat(item.pv_power);\r\n                            existingItem.cons_value += parseFloat(item.pv_power);\r\n                        } else {\r\n                            acc.push({ date: item.date, sys_value: item.pv_power, cons_value: item.pv_power });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                   byMonthFilter.map(row => {\r\n                    setCharge(prevList => [...prevList, row.sys_value]);\r\n                    setDischarge(prevList => [...prevList, row.cons_value]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n                    \r\n                    break\r\n\r\n                case 'year':\r\n                    return;\r\n\r\n                default:\r\n                    return; \r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Charge-Discharge Time',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Charging',\r\n                data: charge,\r\n                backgroundColor: 'rgba(22, 160, 133, 1)',\r\n            },\r\n            {\r\n                label: 'Discharging',\r\n                data: discharge,\r\n                backgroundColor: 'rgba(207, 0, 15, 1)',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Bar options={options} data={data} />;\r\n};\r\n\r\nexport default ChargingChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\nconst BattLevelChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [level, setLevel] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setLevel([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setLevel(prevList => [...prevList, row.batt_level]);\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.level = Math.max(existingItem.level, parseFloat(item.batt_level));\r\n                        } else {\r\n                            acc.push({ date: item.date, level: item.batt_level});\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setLevel(prevList => [...prevList, row.level]);\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                    });\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const levelByMonth = {};\r\n                    const countByMonth = {};\r\n\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const level = sysData[i].batt_level;\r\n\r\n                        if (levelByMonth[yearMonth]) {\r\n                            levelByMonth[yearMonth] += level;\r\n                            countByMonth[yearMonth]++;\r\n                        } else {\r\n                            levelByMonth[yearMonth] = level;\r\n                            countByMonth[yearMonth] = 1;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in levelByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const level = levelByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], level: level});\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setLevel(prevList => [...prevList, row.level]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                display: false,\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Battery Level',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                // zoom: {\r\n                //     pinch: {\r\n                //         enabled: true       // Enable pinch zooming\r\n                //     },\r\n                //     wheel: {\r\n                //         enabled: true       // Enable wheel zooming\r\n                //     },\r\n                //     mode: 'x',\r\n                // }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                type: 'bar',\r\n                label: 'Charging',\r\n                data: level,\r\n                backgroundColor: 'rgba(22, 160, 133, 0.5)',\r\n                borderColor: 'rgba(22, 160, 133, 1)',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default BattLevelChart;","import React, { useEffect, useState } from 'react';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n    Filler,\r\n    LineController,\r\n    BarController,\r\n    zoomPlugin\r\n);\r\n\r\n\r\nconst ProductionChart = (props) => {\r\n    const sysData = props.data;\r\n    const view = props.viewMode;\r\n\r\n    // console.table(sysData);\r\n\r\n    const [label, setLabel] = useState([]);\r\n    const [generate, setGenerate] = useState([]);\r\n    const [temp, setTemp] = useState([]);\r\n    const [light, setLight] = useState([]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setLabel([]);\r\n            setGenerate([]);\r\n            setTemp([]);\r\n            setLight([]);\r\n\r\n            switch (view) {\r\n                case 'day':\r\n                    sysData.map(row => {\r\n                        setLabel(prevList => [...prevList, row.time]);\r\n                        setGenerate(prevList => [...prevList, row.pv_power]);\r\n                        setTemp(prevList => [...prevList, row.temp]);\r\n                        setLight(prevList => [...prevList, row.lux]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                case 'month':\r\n                    const byMonthFilter = sysData.reduce((acc, item) => {\r\n                        const existingItem = acc.find((el) => el.date === item.date);\r\n                        if (existingItem) {\r\n                            existingItem.sys_power += parseFloat(item.pv_power) * 0.16667;\r\n                            existingItem.sys_temp += parseFloat(item.temp);\r\n                            existingItem.sys_lux += parseFloat(item.lux);\r\n                            existingItem.count += 1;\r\n                        } else {\r\n                            acc.push({ date: item.date, sys_power: item.pv_power * 0.16667, sys_temp: item.temp, sys_lux: item.lux, count: 1 });\r\n                        }\r\n                        return acc;\r\n                    }, []);\r\n\r\n                    byMonthFilter.map(row => {\r\n                        setLabel(prevList => [...prevList, row.date]);\r\n                        setGenerate(prevList => [...prevList, row.sys_power]);\r\n                        setTemp(prevList => [...prevList, row.sys_temp/row.count]);\r\n                        setLight(prevList => [...prevList, row.sys_lux/row.count]);\r\n                    });\r\n                    console.table(byMonthFilter);\r\n\r\n                    break\r\n\r\n                case 'year':\r\n                    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n                    const genByMonth = {};\r\n                    const tempByMonth = {};\r\n                    const luxByMonth = {};\r\n                    const countByMonth = {};\r\n\r\n                    for (let i = 0; i < sysData.length; i++) {\r\n                        const dateParts = sysData[i].date.split(' ');\r\n                        const monthIndex = monthNames.indexOf(dateParts[0]);\r\n                        const year = dateParts[2];\r\n                        const yearMonth = `${monthNames[monthIndex]}-${year}`;\r\n                        const generate = sysData[i].pv_power;\r\n                        const temp = sysData[i].temp;\r\n                        const light = sysData[i].lux;\r\n\r\n                        if (genByMonth[yearMonth]) {\r\n                            genByMonth[yearMonth] += generate;\r\n                            tempByMonth[yearMonth] += temp;\r\n                            luxByMonth[yearMonth] += light;\r\n                            countByMonth[yearMonth]++;\r\n                        } else {\r\n                            genByMonth[yearMonth] = generate;\r\n                            tempByMonth[yearMonth] = temp;\r\n                            luxByMonth[yearMonth] = light;\r\n                            countByMonth[yearMonth] = 1;\r\n                        }\r\n                    }\r\n\r\n                    const resultArray = [];\r\n                    for (const yearMonth in genByMonth) {\r\n                        const [monthName, year] = yearMonth.split('-');\r\n                        const month = monthNames.indexOf(monthName) + 1;\r\n                        const generate = genByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        const temp = tempByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        const light = luxByMonth[yearMonth] / countByMonth[yearMonth];\r\n                        resultArray.push({ month: monthNames[month - 1], generate: generate, temp: temp, lux: light });\r\n                    }\r\n\r\n                    resultArray.map(row => {\r\n                        setGenerate(prevList => [...prevList, row.generate]);\r\n                        setTemp(prevList => [...prevList, row.temp]);\r\n                        setLight(prevList => [...prevList, row.lux]);\r\n                        setLabel(prevList => [...prevList, row.month]);\r\n                    });\r\n\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        } catch {\r\n\r\n        }\r\n    }, [sysData, view])\r\n\r\n\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Energy Production',\r\n                font: {\r\n                    size: 24,\r\n                }\r\n            },\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                    mode: 'x'\r\n                },\r\n                zoom: {\r\n                    pinch: {\r\n                        enabled: true       // Enable pinch zooming\r\n                    },\r\n                    wheel: {\r\n                        enabled: true       // Enable wheel zooming\r\n                    },\r\n                    mode: 'x',\r\n                }\r\n            }\r\n        },\r\n    };\r\n\r\n    const labels = label;\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                // fill: true,\r\n                type: 'line',\r\n                label: 'Temperature (°C)',\r\n                backgroundColor: 'rgb(4, 59, 92, 1)',\r\n                data: temp,\r\n                borderColor: 'rgb(4, 59, 92, 1)',\r\n            },\r\n            {\r\n                // fill: true,\r\n                type: 'line',\r\n                label: 'Ambient Light (Lux)',\r\n                backgroundColor: 'rgb(22, 160, 133, 1)',\r\n                data: light,\r\n                borderColor: 'rgb(22, 160, 133, 1)',\r\n            },\r\n            {\r\n                // fill: true,\r\n                type: 'line',\r\n                label: 'Generation (Wh)',\r\n                data: generate,\r\n                backgroundColor: 'rgb(207, 0, 15, 1)',\r\n                borderColor: 'rgb(207, 0, 15, 1)',\r\n            },\r\n        ],\r\n    };\r\n\r\n    return <Chart options={options} data={data} />;\r\n};\r\n\r\nexport default ProductionChart;","import React, { useState, memo } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { FaCalendarAlt } from 'react-icons/fa';\r\nimport EnergyChart from '../charts/energyChart';\r\nimport ChargingChart from '../charts/chargingChart';\r\nimport BattLevelChart from '../charts/battLevelChart';\r\nimport ProductionChart from '../charts/productionChart';\r\n\r\nfunction Analysis(props) {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [showDatePicker, setShowDatePicker] = useState(false);\r\n  const minDate = new Date(2022, 10, 1);\r\n  const [viewMode, setViewMode] = useState('day');\r\n  const [dateFormat, setDateFormat] = useState({ month: 'long', day: 'numeric', year: 'numeric' });\r\n\r\n  const toggleDatePicker = () => {\r\n    setShowDatePicker(!showDatePicker);\r\n  };\r\n  const handleChange = (date) => {\r\n    setSelectedDate(date);\r\n    setShowDatePicker(false);\r\n  };\r\n  const CustomInput = ({ value, onClick }) => (\r\n    <FaCalendarAlt className=\"date-picker-icon\" onClick={onClick} />\r\n  );\r\n  const handleViewModeChange = (mode) => {\r\n    setViewMode(mode);\r\n    if (mode === 'month') {\r\n      setDateFormat({ month: 'long', year: 'numeric' });\r\n    } else if (mode === 'year') {\r\n      setDateFormat({ year: 'numeric' });\r\n    } else {\r\n      setDateFormat({ month: 'long', day: 'numeric', year: 'numeric' });\r\n    }\r\n  };\r\n\r\n  const options = dateFormat;\r\n  const formattedDate = selectedDate.toLocaleDateString('en-US', options);\r\n\r\n  const allData = props.data;\r\n  //Filtered Data by Date\r\n  const filterData = allData.filter(row => {\r\n    const logDate = new Date(row.date);\r\n    const month = logDate.getMonth();\r\n    const day = logDate.getDate();\r\n    const year = logDate.getFullYear();\r\n\r\n    const fDate = new Date(formattedDate);\r\n    const fMonth = fDate.getMonth();\r\n    const fday = fDate.getDate();\r\n    const fYear = fDate.getFullYear();\r\n\r\n    switch (viewMode) {\r\n      case 'day':\r\n        return month === fMonth && day === fday && year === fYear;\r\n      case 'month':\r\n        return month === fMonth && year === fYear;\r\n      case 'year':\r\n        return year === fYear;\r\n      default:\r\n        return month === fMonth && day === fday && year === fYear;\r\n    }\r\n  });\r\n  // console.table(filterData);\r\n  // console.log(formattedDate);\r\n\r\n  return (\r\n    <div className='analysis-container'>\r\n      <div className='d-flex align-items-center my-0'>\r\n        <h3 className='my-0'>System Analysis</h3>\r\n      </div>\r\n      <div className='d-flex align-items-center'>\r\n        <div className='analysis-date-picker w-50 py-1'>\r\n          <div className='date-picker-container d-flex justify-content-start align-items-center gap-2'>\r\n            <CustomInput onClick={toggleDatePicker} />\r\n            <h6 className='my-0'>{formattedDate}</h6>\r\n          </div>\r\n        </div>     {/** DATE PICKER */}\r\n        <div className='analysis-date-type w-100 d-flex justify-content-end gap-2'>\r\n          <button className={viewMode === 'day' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('day')}>Day</button>\r\n          <button className={viewMode === 'month' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('month')}>Month</button>\r\n          <button className={viewMode === 'year' ? 'btn date-type-btn-active btn date-type-btn' : 'btn date-type-btn'} onClick={() => handleViewModeChange('year')}>Year</button>\r\n        </div>\r\n      </div>\r\n\r\n      {showDatePicker && (\r\n        <div className=\"calendar-container\">\r\n          <DatePicker\r\n            selected={selectedDate}\r\n            onChange={handleChange}\r\n            showMonthYearPicker={viewMode === 'month'}\r\n            showYearPicker={viewMode === 'year'}\r\n            customInput={<></>}\r\n            popperPlacement=\"top-start\"\r\n            inline\r\n            minDate={minDate}\r\n            maxDate={new Date()}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className='analysis-section mt-3'>\r\n        {/******* ENERGY CHART ***************************************************/}\r\n\r\n        <div className='chart energy-chart mb-4'>\r\n          <EnergyChart data={filterData} viewMode={viewMode} />\r\n        </div>\r\n\r\n        {/******* CHARGING CHART **************************************************/}\r\n        {/* <div className='chart mb-4'>\r\n          <ChargingChart data={filterData} viewMode={viewMode} />\r\n        </div> */}\r\n\r\n\r\n        {/******* ENERGY ANALYSIS CHART COMBINED **********************************/}\r\n        <div className='chart mb-4'>\r\n          <ProductionChart data={filterData} viewMode={viewMode} className='chart' />\r\n        </div>\r\n\r\n        {/******* BATTERY LEVEL ANALYSIS CHART ************************************/}\r\n        <div className='chart'>\r\n          <BattLevelChart data={filterData} viewMode={viewMode} className='chart' />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Analysis);"],"names":["ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","zoomPlugin","props","sysData","data","view","viewMode","useState","label","setLabel","dataSys","setDataSys","setDataCons","useEffect","map","row","prevList","pv_power","time","reduce","acc","item","existingItem","find","el","date","pv_gen","parseFloat","push","monthNames","sumByDate","i","length","dateParts","split","monthIndex","indexOf","year","yearMonth","value","sumByMonth","resultArray","monthName","month","sum","labels","datasets","backgroundColor","options","responsive","plugins","legend","position","title","display","text","font","size","zoom","pan","enabled","mode","PointElement","LineElement","Filler","LineController","BarController","level","setLevel","batt_level","Math","max","levelByMonth","countByMonth","type","borderColor","generate","setGenerate","temp","setTemp","light","setLight","lux","byMonthFilter","sys_power","sys_temp","sys_lux","count","console","table","genByMonth","tempByMonth","luxByMonth","pinch","wheel","Analysis","Date","selectedDate","setSelectedDate","showDatePicker","setShowDatePicker","minDate","setViewMode","day","dateFormat","setDateFormat","CustomInput","onClick","className","handleViewModeChange","formattedDate","toLocaleDateString","filterData","filter","logDate","getMonth","getDate","getFullYear","fDate","fMonth","fday","fYear","selected","onChange","showMonthYearPicker","showYearPicker","customInput","popperPlacement","inline","maxDate","memo"],"sourceRoot":""}